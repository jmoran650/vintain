This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-04T23:25:50.186Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  (tabs)/
    _layout.tsx
    index.tsx
    profile.tsx
  _layout.tsx
  +not-found.tsx
  auth.tsx
  editProfile.tsx
  listingDetail.tsx
components/
  __tests__/
    __snapshots__/
      ThemedText-test.tsx.snap
    ThemedText-test.tsx
  ui/
    IconSymbol.ios.tsx
    IconSymbol.tsx
    TabBarBackground.ios.tsx
    TabBarBackground.tsx
  Collapsible.tsx
  ExternalLink.tsx
  HapticTab.tsx
  HelloWave.tsx
  ParallaxScrollView.tsx
  ThemedText.tsx
  ThemedView.tsx
constants/
  Colors.ts
context/
  authContext.tsx
hooks/
  useColorScheme.ts
  useColorScheme.web.ts
  useThemeColor.ts
scripts/
  reset-project.js
src/
  apiService.ts
.gitignore
app.json
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: app/(tabs)/_layout.tsx
================
import { Tabs } from "expo-router";
import React from "react";
import { Platform, StyleSheet } from "react-native";

import { HapticTab } from "@/components/HapticTab";
import { IconSymbol } from "@/components/ui/IconSymbol";
import TabBarBackground from "@/components/ui/TabBarBackground";
import { Colors } from "@/constants/Colors";
import { useColorScheme } from "@/hooks/useColorScheme";

export default function TabLayout() {
  const colorScheme = useColorScheme();
  const currentColors = Colors[colorScheme ?? "light"];

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: currentColors.tabIconSelected,
        headerShown: false,
        tabBarButton: HapticTab,
        tabBarBackground: TabBarBackground,
        tabBarStyle: [
          styles.tabBar,
          Platform.select({
            ios: {
              position: "absolute",
              backgroundColor: currentColors.background,
              borderTopColor: currentColors.border,
              borderTopWidth: 1,
            },
            default: {},
          }),
        ],
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: "Home",
          tabBarIcon: ({ color }) => (
            <IconSymbol size={28} name="house.fill" color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="profile"
        options={{
          title: "Profile",
          tabBarIcon: ({ color }) => (
            <IconSymbol size={28} name="person.circle.fill" color={color} />
          ),
        }}
      />
    </Tabs>
  );
}

const styles = StyleSheet.create({
  tabBar: {
    height: 60,
    paddingBottom: 5,
    paddingTop: 5,
  },
});

================
File: app/(tabs)/index.tsx
================
import React, { useEffect, useState } from 'react';
import {
  View, Text, Button, TextInput, FlatList, StyleSheet, TouchableOpacity,
} from 'react-native';
import { useRouter } from 'expo-router';
import { fetchAllListings, searchListings } from '../../src/apiService';

interface Listing {
  id: string;
  brand: string;
  name: string;
  description: string;
  imageUrls: string[];
}

export default function ListingListScreen() {
  const router = useRouter();

  const [listings, setListings] = useState<Listing[]>([]);
  const [totalCount, setTotalCount] = useState(0);
  const [page, setPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [isSearching, setIsSearching] = useState(false);

  const pageSize = 5;

  useEffect(() => {
    loadListings(page);
  }, [page]);

  async function loadListings(newPage: number) {
    try {
      let data;
      if (isSearching && searchTerm.trim().length > 0) {
        data = await searchListings(searchTerm, newPage, pageSize);
      } else {
        data = await fetchAllListings(newPage, pageSize);
      }
      setListings(data.listings);
      setTotalCount(data.totalCount);
    } catch (err) {
      console.error('Failed to load listings:', err);
    }
  }

  async function onSearch() {
    setIsSearching(true);
    setPage(1);
    try {
      const data = await searchListings(searchTerm, 1, pageSize);
      setListings(data.listings);
      setTotalCount(data.totalCount);
    } catch (err) {
      console.error('Search error:', err);
    }
  }

  function onClearSearch() {
    setSearchTerm('');
    setIsSearching(false);
    setPage(1);
  }

  function onNextPage() {
    if ((page * pageSize) < totalCount) {
      setPage(prev => prev + 1);
    }
  }

  function onPrevPage() {
    if (page > 1) {
      setPage(prev => prev - 1);
    }
  }

  function renderItem({ item }: { item: Listing }) {
    return (
      <TouchableOpacity
        style={styles.listItem}
        onPress={() => router.push({
          pathname: '/listingDetail',
          params: { listingId: item.id },
        })}
      >
        <Text style={styles.listItemTitle}>
          {item.brand} - {item.name}
        </Text>
        <Text numberOfLines={2} style={styles.listItemDescription}>{item.description}</Text>
      </TouchableOpacity>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Vintage Listings</Text>

      <View style={styles.searchRow}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search brand/description..."
          placeholderTextColor="#8d6e63"
          value={searchTerm}
          onChangeText={setSearchTerm}
        />
        <Button title="Search" onPress={onSearch} color="#8d6e63" />
        <Button title="Clear" onPress={onClearSearch} color="#a1887f" />
      </View>

      <FlatList
        data={listings}
        keyExtractor={(item) => item.id}
        renderItem={renderItem}
      />

      <View style={styles.paginationRow}>
        <Button title="Prev" onPress={onPrevPage} disabled={page === 1} color="#8d6e63" />
        <Text style={styles.pageText}>Page {page}</Text>
        <Button title="Next" onPress={onNextPage} disabled={(page * pageSize) >= totalCount} color="#8d6e63" />
      </View>

      <Text style={styles.totalText}>Total Listings: {totalCount}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#fff8e1' },
  title: { fontSize: 26, textAlign: 'center', marginBottom: 16, fontFamily: 'SpaceMono', color: '#3e2723' },
  searchRow: {
    flexDirection: 'row',
    marginBottom: 12,
    alignItems: 'center',
  },
  searchInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#8d6e63',
    borderRadius: 8,
    padding: 8,
    marginRight: 4,
    color: '#3e2723',
    fontFamily: 'SpaceMono',
    backgroundColor: '#fff',
  },
  listItem: {
    backgroundColor: '#f7f1e3',
    marginVertical: 6,
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#d7ccc8',
  },
  listItemTitle: {
    fontWeight: 'bold',
    marginBottom: 4,
    fontSize: 18,
    color: '#3e2723',
    fontFamily: 'SpaceMono',
  },
  listItemDescription: {
    fontSize: 14,
    color: '#5d4037',
    fontFamily: 'SpaceMono',
  },
  paginationRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
    alignItems: 'center',
  },
  pageText: {
    fontFamily: 'SpaceMono',
    fontSize: 16,
    color: '#3e2723',
  },
  totalText: {
    textAlign: 'center',
    marginTop: 8,
    fontFamily: 'SpaceMono',
    color: '#3e2723',
  },
});

================
File: app/(tabs)/profile.tsx
================
import React, { useContext, useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, Button } from 'react-native';
import { AuthContext } from '../../context/authContext';
import { fetchMyProfile } from '../../src/apiService';
import { useRouter } from 'expo-router';

export default function ProfileScreen() {
  const router = useRouter();
  const { user, signOut } = useContext(AuthContext);
  const [profile, setProfile] = useState<{
    id: string;
    name: { first: string; last: string };
    profile: { username: string; bio?: string | null };
  } | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user?.id) {
      loadProfile(user.id);
    } else {
      setLoading(false);
    }
  }, [user]);

  async function loadProfile(id: string) {
    try {
      const data = await fetchMyProfile(id);
      setProfile(data);
    } catch (err) {
      console.error('Failed to fetch profile:', err);
    } finally {
      setLoading(false);
    }
  }

  function handleSignOut() {
    signOut().catch((err) => {
      console.error('Failed to sign out', err);
    });
  }

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator color="#8d6e63" />
      </View>
    );
  }

  if (!profile) {
    return (
      <View style={styles.container}>
        <Text style={styles.message}>No profile found.</Text>
        <Button title="Sign Out" onPress={handleSignOut} color="#8d6e63" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>
        {profile.name.first} {profile.name.last}
      </Text>
      <Text style={styles.subtitle}>@{profile.profile.username}</Text>
      <Button title="Edit Profile" onPress={() => router.push('/editProfile')} color="#8d6e63" />
      <Text style={styles.bio}>{profile.profile.bio || 'No bio available.'}</Text>
      
      <Button title="Sign Out" onPress={handleSignOut} color="#8d6e63" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#fff8e1', justifyContent: 'center', alignItems: 'center' },
  title: { fontSize: 28, fontWeight: 'bold', marginBottom: 8, color: '#3e2723', fontFamily: 'SpaceMono' },
  subtitle: { fontSize: 20, color: '#5d4037', marginBottom: 12, fontFamily: 'SpaceMono' },
  bio: { fontSize: 16, marginBottom: 16, color: '#3e2723', fontFamily: 'SpaceMono', textAlign: 'center' },
  message: { fontSize: 16, marginBottom: 16, color: '#3e2723', fontFamily: 'SpaceMono' },
});

================
File: app/_layout.tsx
================
import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import { StatusBar } from 'expo-status-bar';
import { useEffect, useContext } from 'react';
import 'react-native-reanimated';
import { useColorScheme } from '@/hooks/useColorScheme';
import { AuthProvider, AuthContext } from '../context/authContext';
import AuthScreen from './auth';

SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const colorScheme = useColorScheme();
  const [loaded] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
  });

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return (
    <AuthProvider>
      <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
        <AuthOrStack />
        <StatusBar style="auto" />
      </ThemeProvider>
    </AuthProvider>
  );
}

function AuthOrStack() {
  const { token, loading } = useContext(AuthContext);

  if (loading) {
    return null;
  }

  if (!token) {
    return <AuthScreen />;
  }

  return (
    <Stack>
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      <Stack.Screen name="+not-found" />
      <Stack.Screen
        name="listingDetail"
        options={{
          headerTitle: '',
          headerBackTitle: '',
          headerTransparent: true,
          headerBackButtonMenuEnabled: false,
        }}
      />
    </Stack>
  );
}

================
File: app/+not-found.tsx
================
import { Link, Stack } from 'expo-router';
import { StyleSheet } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import React from 'react';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <ThemedView style={styles.container}>
        <ThemedText type="title">This screen doesn't exist.</ThemedText>
        <Link href="/" style={styles.link}>
          <ThemedText type="link">Go to home screen!</ThemedText>
        </Link>
      </ThemedView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
    backgroundColor: '#fff8e1',
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});

================
File: app/auth.tsx
================
import React, { useContext, useState } from "react";
import {
  View,
  Text,
  TextInput,
  Button,
  StyleSheet,
  Alert,
  TouchableOpacity,
} from "react-native";
import { AuthContext } from "../context/authContext";
import { signIn as apiSignIn, signUp as apiSignUp } from "../src/apiService";

export default function AuthScreen() {
  const { signIn } = useContext(AuthContext);

  const [isSignUp, setIsSignUp] = useState(false);

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [username, setUsername] = useState("");

  const defaultRoles = ["User"];

  async function handleSubmit() {
    if (isSignUp) {
      try {
        const newAccount = await apiSignUp(
          email,
          password,
          firstName,
          lastName,
          defaultRoles,
          username
        );
        Alert.alert("Success", `Account created for ${newAccount.email}`);
        setIsSignUp(false);
      } catch (err: any) {
        Alert.alert("Error", err.message || "Failed to create account");
      }
    } else {
      try {
        const data = await apiSignIn(email, password);
        Alert.alert("Welcome", `Hello, ${data.name.first}!`);
        await signIn(data.accessToken, data);
      } catch (err: any) {
        Alert.alert("Error", err.message || "Failed to sign in");
      }
    }
  }

  function toggleMode() {
    setIsSignUp(!isSignUp);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.header}>
        {isSignUp ? "Create Account" : "Sign In"}
      </Text>

      <TextInput
        style={styles.input}
        placeholder="Email"
        placeholderTextColor="#8d6e63"
        autoCapitalize="none"
        value={email}
        onChangeText={setEmail}
      />

      <TextInput
        style={styles.input}
        placeholder="Password"
        placeholderTextColor="#8d6e63"
        secureTextEntry
        value={password}
        autoCapitalize="none"
        onChangeText={setPassword}
      />

      {isSignUp && (
        <>
          <TextInput
            style={styles.input}
            placeholder="First Name"
            placeholderTextColor="#8d6e63"
            value={firstName}
            autoCapitalize="none"
            onChangeText={setFirstName}
          />
          <TextInput
            style={styles.input}
            placeholder="Last Name"
            placeholderTextColor="#8d6e63"
            value={lastName}
            autoCapitalize="none"
            onChangeText={setLastName}
          />
          <TextInput
            style={styles.input}
            placeholder="Username"
            placeholderTextColor="#8d6e63"
            value={username}
            autoCapitalize="none"
            onChangeText={setUsername}
          />
        </>
      )}

      <Button title={isSignUp ? "Sign Up" : "Sign In"} onPress={handleSubmit} color="#8d6e63" />

      <TouchableOpacity onPress={toggleMode} style={styles.toggleBtn}>
        <Text style={styles.toggleText}>
          {isSignUp
            ? "Already have an account? Sign in"
            : "Don't have an account? Sign up"}
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff8e1',
    justifyContent: "center",
  },
  header: {
    fontSize: 28,
    marginBottom: 16,
    textAlign: "center",
    fontFamily: 'SpaceMono',
    color: '#3e2723',
  },
  input: {
    borderWidth: 1,
    borderColor: "#8d6e63",
    marginBottom: 12,
    padding: 10,
    borderRadius: 8,
    color: '#3e2723',
    fontFamily: 'SpaceMono',
    backgroundColor: '#fff',
  },
  toggleBtn: {
    marginTop: 12,
    alignItems: "center",
  },
  toggleText: {
    color: "#8d6e63",
    fontSize: 14,
    textDecorationLine: "underline",
    fontFamily: 'SpaceMono',
  },
});

================
File: app/editProfile.tsx
================
// vintainApp/app/editProfile.tsx
import React, { useState, useContext } from 'react';
import { View, Text, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { updateProfile } from '../src/apiService';
import { AuthContext } from '../context/authContext';

export default function EditProfileScreen() {
  // Option 1: Get the current user ID from context
  const { user } = useContext(AuthContext);
  // Option 2: You might also pass the ID as a route parameter:
  // const { id } = useLocalSearchParams<{ id: string }>();

  // We'll use the user ID from context here.
  const userId = user?.id;
  const router = useRouter();

  // Local state for the form fields:
  const [username, setUsername] = useState(user?.profile?.username || '');
  const [bio, setBio] = useState(user?.profile?.bio || '');

  async function handleSubmit() {
    if (!userId) {
      Alert.alert("Error", "User ID not found.");
      return;
    }
    try {
      const success = await updateProfile(userId, username, bio);
      if (success) {
        Alert.alert("Success", "Profile updated successfully!");
        // Optionally, navigate back or refresh your profile:
        router.back();
      } else {
        Alert.alert("Error", "Profile update failed.");
      }
    } catch (error: any) {
      Alert.alert("Error", error.message || "Failed to update profile");
    }
  }

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Edit Profile</Text>
      <TextInput
        style={styles.input}
        placeholder="Username"
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        style={[styles.input, styles.multiline]}
        placeholder="Bio"
        value={bio}
        onChangeText={setBio}
        multiline
      />
      <Button title="Save Changes" onPress={handleSubmit} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, justifyContent: 'center' },
  header: { fontSize: 24, marginBottom: 16, textAlign: 'center' },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    marginBottom: 12,
    padding: 8,
    borderRadius: 4,
  },
  multiline: {
    height: 80,
    textAlignVertical: 'top',
  },
});

================
File: app/listingDetail.tsx
================
import React, { useEffect, useState } from 'react';
import { useLocalSearchParams } from "expo-router";
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  SafeAreaView,
} from 'react-native';
import { fetchListingById } from '../src/apiService';

export default function ListingDetail() {
  const { listingId } = useLocalSearchParams();
  const [listing, setListing] = useState<any>(null);

  useEffect(() => {
    if (listingId) {
      loadListing(listingId as string);
    }
  }, [listingId]);

  async function loadListing(id: string) {
    try {
      const data = await fetchListingById(id);
      setListing(data);
    } catch (err) {
      console.error('Failed to fetch listing detail:', err);
    }
  }

  if (!listing) {
    return (
      <SafeAreaView style={styles.container}>
        <Text style={styles.loadingText}>Loading listing details...</Text>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <Text style={styles.title}>{listing.brand} - {listing.name}</Text>
        <Text style={styles.subtitle}>Listing ID: {listing.id}</Text>
        <Text style={styles.description}>{listing.description}</Text>
        {listing.imageUrls?.map((url: string, idx: number) => (
          <Image key={idx} source={{ uri: url }} style={styles.image} />
        ))}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff8e1',
  },
  scrollContent: {
    padding: 16,
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 8,
    color: '#3e2723',
    fontFamily: 'SpaceMono',
  },
  subtitle: { 
    fontSize: 14, 
    marginBottom: 8, 
    color: '#5d4037',
    fontFamily: 'SpaceMono',
  },
  description: { 
    fontSize: 16, 
    marginBottom: 12,
    color: '#3e2723',
    fontFamily: 'SpaceMono',
  },
  image: { 
    width: '100%', 
    height: 200, 
    resizeMode: 'cover', 
    marginBottom: 12,
    borderRadius: 8,
  },
  loadingText: {
    fontSize: 16,
    textAlign: 'center',
    marginTop: 20,
    color: '#3e2723',
    fontFamily: 'SpaceMono',
  },
});

================
File: components/__tests__/__snapshots__/ThemedText-test.tsx.snap
================
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<Text
  style={
    [
      {
        "color": "#11181C",
      },
      {
        "fontSize": 16,
        "lineHeight": 24,
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ]
  }
>
  Snapshot test!
</Text>
`;

================
File: components/__tests__/ThemedText-test.tsx
================
import * as React from 'react';
import renderer from 'react-test-renderer';

import { ThemedText } from '../ThemedText';

it(`renders correctly`, () => {
  const tree = renderer.create(<ThemedText>Snapshot test!</ThemedText>).toJSON();

  expect(tree).toMatchSnapshot();
});

================
File: components/ui/IconSymbol.ios.tsx
================
import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';
import { StyleProp, ViewStyle } from 'react-native';

export function IconSymbol({
  name,
  size = 24,
  color,
  style,
  weight = 'regular',
}: {
  name: SymbolViewProps['name'];
  size?: number;
  color: string;
  style?: StyleProp<ViewStyle>;
  weight?: SymbolWeight;
}) {
  return (
    <SymbolView
      weight={weight}
      tintColor={color}
      resizeMode="scaleAspectFit"
      name={name}
      style={[
        { width: size, height: size },
        style,
      ]}
    />
  );
}

================
File: components/ui/IconSymbol.tsx
================
// vintainApp/components/ui/IconSymbol.tsx
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { SymbolWeight } from 'expo-symbols';
import React from 'react';
import { OpaqueColorValue, StyleProp, TextStyle } from 'react-native'; // Import TextStyle instead of ViewStyle

// Define a mapping for icon names to MaterialIcons names.
const MAPPING = {
  'house.fill': 'home',
  'paperplane.fill': 'send',
  'chevron.left.forwardslash.chevron.right': 'code',
  'chevron.right': 'chevron-right',
} as Partial<
  Record<
    import('expo-symbols').SymbolViewProps['name'],
    React.ComponentProps<typeof MaterialIcons>['name']
  >
>;

export type IconSymbolName = keyof typeof MAPPING;

export function IconSymbol({
  name,
  size = 24,
  color,
  style,  // Expect style to be a TextStyle style
}: {
  name: IconSymbolName;
  size?: number;
  color: string | OpaqueColorValue;
  style?: StyleProp<TextStyle>;  // <-- use TextStyle here
  weight?: SymbolWeight;
}) {
  return <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;
}

================
File: components/ui/TabBarBackground.ios.tsx
================
import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';
import { BlurView } from 'expo-blur';
import { StyleSheet } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

export default function BlurTabBarBackground() {
  return (
    <BlurView
      tint="default"
      intensity={80}
      style={StyleSheet.absoluteFill}
    />
  );
}

export function useBottomTabOverflow() {
  const tabHeight = useBottomTabBarHeight();
  const { bottom } = useSafeAreaInsets();
  return tabHeight - bottom;
}

================
File: components/ui/TabBarBackground.tsx
================
// Shim for platforms without a blur view (web/Android)
export default undefined;

export function useBottomTabOverflow() {
  return 0;
}

================
File: components/Collapsible.tsx
================
import { PropsWithChildren, useState } from 'react';
import { StyleSheet, TouchableOpacity, View } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function Collapsible({ children, title }: PropsWithChildren<{ title: string }>) {
  const [isOpen, setIsOpen] = useState(false);
  const theme = useColorScheme() ?? 'light';

  return (
    <ThemedView style={styles.container}>
      <TouchableOpacity
        style={styles.heading}
        onPress={() => setIsOpen((value) => !value)}
        activeOpacity={0.8}>
        <IconSymbol
          name="chevron.right"
          size={18}
          weight="medium"
          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}
          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}
        />
        <ThemedText type="defaultSemiBold">{title}</ThemedText>
      </TouchableOpacity>
      {isOpen && <View style={styles.content}>{children}</View>}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    marginVertical: 8,
    padding: 12,
    borderWidth: 1,
    borderColor: '#d7ccc8',
    borderRadius: 8,
    backgroundColor: 'rgba(255,255,255,0.8)',
  },
  heading: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  content: {
    marginTop: 8,
    marginLeft: 24,
  },
});

================
File: components/ExternalLink.tsx
================
// components/ExternalLink.tsx
import { Link } from 'expo-router';
import { openBrowserAsync } from 'expo-web-browser';
import { type ComponentProps } from 'react';
import { Platform } from 'react-native';

// Define our own props: we want href to be any string.
type Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: string };

export function ExternalLink({ href, ...rest }: Props) {
  return (
    <Link
      target="_blank"
      {...rest}
      href={href as any}  // <-- cast here so TypeScript won’t complain
      onPress={async (event) => {
        if (Platform.OS !== 'web') {
          event.preventDefault();
          await openBrowserAsync(href);
        }
      }}
    />
  );
}

================
File: components/HapticTab.tsx
================
import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';
import { PlatformPressable } from '@react-navigation/elements';
import * as Haptics from 'expo-haptics';

export function HapticTab(props: BottomTabBarButtonProps) {
  return (
    <PlatformPressable
      {...props}
      onPressIn={(ev) => {
        if (process.env.EXPO_OS === 'ios') {
          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        }
        props.onPressIn?.(ev);
      }}
    />
  );
}

================
File: components/HelloWave.tsx
================
import { useEffect } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
  withRepeat,
  withSequence,
} from 'react-native-reanimated';

import { ThemedText } from '@/components/ThemedText';

export function HelloWave() {
  const rotationAnimation = useSharedValue(0);

  useEffect(() => {
    rotationAnimation.value = withRepeat(
      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),
      4
    );
  }, []);

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotationAnimation.value}deg` }],
  }));

  return (
    <Animated.View style={animatedStyle}>
      <ThemedText style={styles.text}>👋</ThemedText>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    lineHeight: 32,
    marginTop: -6,
    textShadowColor: 'rgba(0,0,0,0.3)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
});

================
File: components/ParallaxScrollView.tsx
================
import type { PropsWithChildren, ReactElement } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  interpolate,
  useAnimatedRef,
  useAnimatedStyle,
  useScrollViewOffset,
} from 'react-native-reanimated';

import { ThemedView } from '@/components/ThemedView';
import { useBottomTabOverflow } from '@/components/ui/TabBarBackground';
import { useColorScheme } from '@/hooks/useColorScheme';

const HEADER_HEIGHT = 250;

type Props = PropsWithChildren<{
  headerImage: ReactElement;
  headerBackgroundColor: { dark: string; light: string };
}>;

export default function ParallaxScrollView({
  children,
  headerImage,
  headerBackgroundColor,
}: Props) {
  const colorScheme = useColorScheme() ?? 'light';
  const scrollRef = useAnimatedRef<Animated.ScrollView>();
  const scrollOffset = useScrollViewOffset(scrollRef);
  const bottom = useBottomTabOverflow();
  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: interpolate(
            scrollOffset.value,
            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],
            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]
          ),
        },
        {
          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),
        },
      ],
    };
  });

  return (
    <ThemedView style={styles.container}>
      <Animated.ScrollView
        ref={scrollRef}
        scrollEventThrottle={16}
        scrollIndicatorInsets={{ bottom }}
        contentContainerStyle={{ paddingBottom: bottom }}>
        <Animated.View
          style={[
            styles.header,
            { backgroundColor: headerBackgroundColor[colorScheme] },
            headerAnimatedStyle,
          ]}>
          {headerImage}
        </Animated.View>
        <ThemedView style={styles.content}>{children}</ThemedView>
      </Animated.ScrollView>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    height: HEADER_HEIGHT,
    overflow: 'hidden',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  content: {
    flex: 1,
    padding: 24,
    gap: 16,
  },
});

================
File: components/ThemedText.tsx
================
import { Text, type TextProps, StyleSheet } from 'react-native';
import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedTextProps = TextProps & {
  lightColor?: string;
  darkColor?: string;
  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';
};

export function ThemedText({
  style,
  lightColor,
  darkColor,
  type = 'default',
  ...rest
}: ThemedTextProps) {
  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');

  return (
    <Text
      style={[
        { color, fontFamily: 'SpaceMono' },
        type === 'default' && styles.default,
        type === 'title' && styles.title,
        type === 'defaultSemiBold' && styles.defaultSemiBold,
        type === 'subtitle' && styles.subtitle,
        type === 'link' && styles.link,
        style,
      ]}
      {...rest}
    />
  );
}

const styles = StyleSheet.create({
  default: {
    fontSize: 16,
    lineHeight: 24,
  },
  defaultSemiBold: {
    fontSize: 16,
    lineHeight: 24,
    fontWeight: '600',
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    lineHeight: 36,
    textShadowColor: 'rgba(0, 0, 0, 0.2)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
  subtitle: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 4,
  },
  link: {
    fontSize: 16,
    color: '#8d6e63',
    textDecorationLine: 'underline',
  },
});

================
File: components/ThemedView.tsx
================
import { View, type ViewProps, StyleSheet } from 'react-native';
import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedViewProps = ViewProps & {
  lightColor?: string;
  darkColor?: string;
};

export function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {
  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');

  return <View style={[styles.container, { backgroundColor }, style]} {...otherProps} />;
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

================
File: constants/Colors.ts
================
/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const tintColorLight = '#0a7ea4';
const tintColorDark = '#fff';

/**
 * Vintage earth tone color palette.
 */
export const Colors = {
  light: {
    text: "#3e2723",           // rich dark brown
    background: "#fff8e1",     // light creamy tone
    tint: "#8d6e63",           // soft taupe
    icon: "#6d4c41",           // deep brown
    tabIconDefault: "#6d4c41",
    tabIconSelected: "#8d6e63",
    border: "#d7ccc8",
  },
  dark: {
    text: "#d7ccc8",           // pale, light brownish grey
    background: "#4e342e",     // dark chocolate brown
    tint: "#bcaaa4",           // warm grey
    icon: "#a1887f",
    tabIconDefault: "#a1887f",
    tabIconSelected: "#bcaaa4",
    border: "#8d6e63",
  },
};

================
File: context/authContext.tsx
================
// vintainApp/context/authContext.tsx
import React, { createContext, useState, useEffect, ReactNode } from 'react';
import * as SecureStore from 'expo-secure-store';
// Import setAuthToken from your API service
import { setAuthToken } from '../src/apiService';

type AuthContextType = {
  token: string | null;
  user: any | null;
  loading: boolean;
  signIn: (token: string, user: any) => Promise<void>;
  signOut: () => Promise<void>;
};

export const AuthContext = createContext<AuthContextType>({
  token: null,
  user: null,
  loading: true,
  signIn: async () => undefined,
  signOut: async () => undefined,
});

type AuthProviderProps = {
  children: ReactNode;
};

export function AuthProvider({ children }: AuthProviderProps) {
  const [token, setTokenState] = useState<string | null>(null);
  const [user, setUser] = useState<any | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    (async () => {
      try {
        const savedToken = await SecureStore.getItemAsync('token');
        if (savedToken) {
          setTokenState(savedToken);
          // Also update our API service with the token.
          setAuthToken(savedToken);
        }
      } catch (err) {
        console.error('Error loading token from SecureStore', err);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  async function signIn(newToken: string, userData: any) {
    try {
      await SecureStore.setItemAsync('token', newToken);
      setTokenState(newToken);
      setUser(userData);
      // Set token in our API service so all future requests include it.
      setAuthToken(newToken);
    } catch (err) {
      console.error('Error saving token to SecureStore', err);
    }
  }

  async function signOut() {
    try {
      await SecureStore.deleteItemAsync('token');
      setTokenState(null);
      setUser(null);
      // Clear token in our API service.
      setAuthToken(null);
    } catch (err) {
      console.error('Error deleting token from SecureStore', err);
    }
  }

  const value: AuthContextType = {
    token,
    user,
    loading,
    signIn,
    signOut,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

================
File: hooks/useColorScheme.ts
================
export { useColorScheme } from 'react-native';

================
File: hooks/useColorScheme.web.ts
================
import { useEffect, useState } from 'react';
import { useColorScheme as useRNColorScheme } from 'react-native';

/**
 * To support static rendering, this value needs to be re-calculated on the client side for web
 */
export function useColorScheme() {
  const [hasHydrated, setHasHydrated] = useState(false);

  useEffect(() => {
    setHasHydrated(true);
  }, []);

  const colorScheme = useRNColorScheme();

  if (hasHydrated) {
    return colorScheme;
  }

  return 'light';
}

================
File: hooks/useThemeColor.ts
================
/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */

import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function useThemeColor(
  props: { light?: string; dark?: string },
  colorName: keyof typeof Colors.light & keyof typeof Colors.dark
) {
  const theme = useColorScheme() ?? 'light';
  const colorFromProps = props[theme];

  if (colorFromProps) {
    return colorFromProps;
  } else {
    return Colors[theme][colorName];
  }
}

================
File: scripts/reset-project.js
================
#!/usr/bin/env node

/**
 * This script is used to reset the project to a blank state.
 * It moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example and creates a new /app directory with an index.tsx and _layout.tsx file.
 * You can remove the `reset-project` script from package.json and safely delete this file after running it.
 */

const fs = require("fs");
const path = require("path");

const root = process.cwd();
const oldDirs = ["app", "components", "hooks", "constants", "scripts"];
const newDir = "app-example";
const newAppDir = "app";
const newDirPath = path.join(root, newDir);

const indexContent = `import { Text, View } from "react-native";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;

const layoutContent = `import { Stack } from "expo-router";

export default function RootLayout() {
  return <Stack />;
}
`;

const moveDirectories = async () => {
  try {
    // Create the app-example directory
    await fs.promises.mkdir(newDirPath, { recursive: true });
    console.log(`📁 /${newDir} directory created.`);

    // Move old directories to new app-example directory
    for (const dir of oldDirs) {
      const oldDirPath = path.join(root, dir);
      const newDirPath = path.join(root, newDir, dir);
      if (fs.existsSync(oldDirPath)) {
        await fs.promises.rename(oldDirPath, newDirPath);
        console.log(`➡️ /${dir} moved to /${newDir}/${dir}.`);
      } else {
        console.log(`➡️ /${dir} does not exist, skipping.`);
      }
    }

    // Create new /app directory
    const newAppDirPath = path.join(root, newAppDir);
    await fs.promises.mkdir(newAppDirPath, { recursive: true });
    console.log("\n📁 New /app directory created.");

    // Create index.tsx
    const indexPath = path.join(newAppDirPath, "index.tsx");
    await fs.promises.writeFile(indexPath, indexContent);
    console.log("📄 app/index.tsx created.");

    // Create _layout.tsx
    const layoutPath = path.join(newAppDirPath, "_layout.tsx");
    await fs.promises.writeFile(layoutPath, layoutContent);
    console.log("📄 app/_layout.tsx created.");

    console.log("\n✅ Project reset complete. Next steps:");
    console.log(
      "1. Run `npx expo start` to start a development server.\n2. Edit app/index.tsx to edit the main screen.\n3. Delete the /app-example directory when you're done referencing it."
    );
  } catch (error) {
    console.error(`Error during script execution: ${error}`);
  }
};

moveDirectories();

================
File: src/apiService.ts
================
// vintainApp/src/apiService.ts
const BASE_URL = "http://localhost:4000/graphql";

// A module-level variable to store the token:
let authToken: string | null = null;

// A function to update the token (you can call this from your AuthContext when a user signs in)
export function setAuthToken(token: string | null) {
  authToken = token;
}

async function graphQLFetch(query: string, variables: any = {}) {
  // Build headers, including Authorization if authToken exists.
  const headers: HeadersInit = {
    "Content-Type": "application/json",
    ...(authToken ? { "Authorization": `Bearer ${authToken}` } : {})
  };

  const res = await fetch(BASE_URL, {
    method: "POST",
    headers,
    body: JSON.stringify({ query, variables }),
  });
  const json = await res.json();
  if (json.errors) {
    throw new Error(json.errors[0].message || "GraphQL Error");
  }
  return json.data;
}

export async function signUp(
  email: string,
  password: string,
  firstName: string,
  lastName: string,
  roles: string[],
  username: string
) {
  try {
    const query = `
      mutation($input: NewAccount!) {
        makeAccount(input: $input) {
          id
          email
        }
      }
    `;
    // Pass username in as well
    const variables = {
      input: {
        email,
        password,
        firstName,
        lastName,
        roles,
        username,  // required
      },
    };
    const data = await graphQLFetch(query, variables);
    return data.makeAccount;
  } catch (error) {
    console.log(error);
  }
}

export async function signIn(email: string, password: string) {
  const query = `
    query($creds: Credentials!) {
      login(input: $creds) {
        id
        name { first last }
        accessToken
      }
    }
  `;
  const variables = { creds: { email, password } };
  const data = await graphQLFetch(query, variables);
  return data.login;
}

export async function fetchAllListings(page = 1, pageSize = 10) {
  const query = `
    query($page: Int!, $pageSize: Int!) {
      allListings(page: $page, pageSize: $pageSize) {
        listings { id brand name description imageUrls }
        totalCount
      }
    }
  `;
  const data = await graphQLFetch(query, { page, pageSize });
  return data.allListings;
}

export async function searchListings(searchTerm: string, page = 1, pageSize = 10) {
  const query = `
    query($searchTerm: String!, $page: Int!, $pageSize: Int!) {
      searchListings(searchTerm: $searchTerm, page: $page, pageSize: $pageSize) {
        listings { id brand name description imageUrls }
        totalCount
      }
    }
  `;
  const data = await graphQLFetch(query, { searchTerm, page, pageSize });
  return data.searchListings;
}

export async function fetchListingById(id: string) {
  const query = `
    query($id: String!) {
      listing(id: $id) {
        id
        brand
        name
        description
        imageUrls
      }
    }
  `;
  const data = await graphQLFetch(query, { id });
  return data.listing;
}

export async function fetchMyProfile(id: string) {
  const query = `
    query($id: String!) {
      account(input: $id) {
        id
        name {
          first
          last
        }
        profile {
          username
          bio
        }
      }
    }
  `;
  const variables = { id };
  const data = await graphQLFetch(query, variables);
  return data.account;
}

// vintainApp/src/apiService.ts
export async function updateProfile(
    id: string,
    username?: string,
    bio?: string
  ) {
    const query = `
      mutation UpdateProfile($id: String!, $username: String, $bio: String) {
        updateProfile(id: $id, username: $username, bio: $bio)
      }
    `;
    const variables = { id, username, bio };
    const data = await graphQLFetch(query, variables);
    return data.updateProfile; // returns true/false
  }

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example

================
File: app.json
================
{
  "expo": {
    "name": "vintainApp",
    "slug": "vintainApp",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: package.json
================
{
  "name": "vintainapp",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "@react-navigation/stack": "^7.1.1",
    "expo": "~52.0.23",
    "expo-blur": "~14.0.1",
    "expo-constants": "~17.0.3",
    "expo-font": "~13.0.2",
    "expo-haptics": "~14.0.0",
    "expo-linking": "~7.0.3",
    "expo-router": "~4.0.15",
    "expo-secure-store": "^14.0.1",
    "expo-splash-screen": "~0.29.18",
    "expo-status-bar": "~2.0.0",
    "expo-symbols": "~0.2.0",
    "expo-system-ui": "~4.0.6",
    "expo-web-browser": "~14.0.1",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.5",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.2",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}

================
File: README.md
================
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}
