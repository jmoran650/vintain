This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-07T19:07:46.629Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:

1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:

- File path as an attribute
- Full contents of the file
</file_format>

<usage_guidelines>

- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/
  account/
    graphql/
      resolver.ts
      schema.ts
      service.ts
  auth/
    graphql/
      resolver.ts
      schema.ts
      service.ts
  common/
    decorators.ts
    types.ts
  database/
    sql/
      schema.sql
  listing/
    graphql/
      resolver.ts
      schema.ts
      service.ts
  message/
    graphql/
      resolver.ts
      schema.ts
      service.ts
  orders/
    graphql/
      resolver.ts
      schema.ts
      service.ts
  s3/
    graphql/
      resolver.ts
      schema.ts
      service.ts
tests/
  domains/
    account/
      account.test.ts
    auth/
      check.test.ts
      login.test.ts
    common/
      db/
        reset.ts
    listing/
      listing.test.ts
    message/
      message.test.ts
    orders/
      orders.test.ts
  fixtures/
    data.sql
    schema.sql
  dbTest.ts
.repomixignore
babel.config.js
db.ts
index.ts
jest.config.js
package.json
repomix.config.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/account/graphql/resolver.ts">
// src/account/graphql/resolver.ts
import { Authorized, Query, Resolver, Ctx, Mutation, Arg } from "type-graphql";
import { Request } from "express";
import { AccountService } from "./service";
import { Account, NewAccount } from "./schema";
import { UUID, Email } from "../../common/types";
import { Service } from "typedi";
import { Public } from "../../common/decorators";

@Service()
@Resolver()
export class AccountResolver {
  constructor(private readonly accountService: AccountService) {}

  @Authorized()
  @Query(() => Account)
  async account(
    @Ctx() _req: Request,
    @Arg("input") id: UUID
  ): Promise<Account> {
    return this.accountService.getAccount(id);
  }

  @Authorized()
  @Query(() => Account)
  async accountByEmail(
    @Ctx() _req: Request,
    @Arg("input") email: Email
  ): Promise<Account> {
    return this.accountService.getAccountByEmail(email.toLowerCase());
  }

  @Authorized()
  @Query(() => [Account])
  async allAccounts(@Ctx() _req: Request): Promise<Account[]> {
    return this.accountService.getAllAccounts();
  }

  @Authorized()
  @Query(() => [Account])
  async restrictedVendors(@Ctx() _req: Request): Promise<Account[]> {
    const all = await this.accountService.getAllAccounts();
    return all.filter((acc) => acc.restricted && acc.roles.includes("Vendor"));
  }

  // Public operation: account creation is marked as public via decorator.
  @Public()
  @Mutation(() => Account)
  async makeAccount(
    @Arg("input") newAccount: NewAccount,
    @Ctx() _request: Request
  ): Promise<Account> {
    newAccount.email = newAccount.email.toLowerCase();
    return this.accountService.makeAccount(newAccount);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async deleteAccount(
    @Arg("input") accountID: UUID,
    @Ctx() _request: Request
  ): Promise<boolean> {
    return this.accountService.deleteAccount(accountID);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async deleteAccountByEmail(
    @Arg("input") accountEmail: Email,
    @Ctx() _request: Request
  ): Promise<boolean> {
    return this.accountService.deleteAccountByEmail(accountEmail.toLowerCase());
  }

  @Authorized()
  @Mutation(() => Boolean)
  async suspendAccount(
    @Arg("input") accountID: UUID,
    @Ctx() _request: Request
  ): Promise<boolean> {
    return this.accountService.suspendAccount(accountID);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async suspendAccountByEmail(
    @Arg("input") accountEmail: Email,
    @Ctx() _request: Request
  ): Promise<boolean> {
    return this.accountService.suspendAccountByEmail(accountEmail.toLowerCase());
  }

  @Authorized()
  @Mutation(() => Boolean)
  async resumeAccount(
    @Arg("input") accountID: UUID,
    @Ctx() _request: Request
  ): Promise<boolean> {
    return this.accountService.resumeAccount(accountID);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async resumeAccountByEmail(
    @Arg("input") accountEmail: Email,
    @Ctx() _request: Request
  ): Promise<boolean> {
    return this.accountService.resumeAccountByEmail(accountEmail.toLowerCase());
  }

// src/account/graphql/resolver.ts (partial change)

@Authorized()
@Mutation(() => Boolean)
async updateProfile(
  @Arg("id") id: UUID,
  @Arg("username", { nullable: true }) username?: string,
  @Arg("bio", { nullable: true }) bio?: string,
  // New optional argument:
  @Arg("profilePicture", { nullable: true }) profilePicture?: string
): Promise<boolean> {
  return this.accountService.updateProfile(id, username, bio, profilePicture);
}

}
</file>

<file path="src/account/graphql/schema.ts">
// src/account/graphql/schema.ts
import { ObjectType, InputType, Field } from "type-graphql";
import { MinLength } from "class-validator";
import { Name, UUID, Email } from "../../common/types";

// src/account/graphql/schema.ts

@ObjectType()
export class Profile {
  @Field()
  @MinLength(1)
  username!: string;

  @Field({ nullable: true })
  bio?: string;

  // New field for profile picture URL
  @Field({ nullable: true })
  profilePicture?: string;
}

/**

- The Account object includes a non-null profile.
 */
@ObjectType()
export class Account {
  @Field()
  id!: UUID;

  @Field()
  email!: Email;

  @Field()
  name!: Name;

  @Field(() => [String])
  roles!: string[];

  @Field()
  restricted!: boolean;

  @Field(() => Profile)
  profile!: Profile;
}

/**

- Input for creating a new account.
 */
@InputType()
export class NewAccount {
  @Field()
  email!: Email;

  @Field()
  @MinLength(1)
  password!: string;

  @Field()
  @MinLength(1)
  firstName!: string;

  @Field()
  @MinLength(1)
  lastName!: string;

  @Field(() => [String])
  roles!: string[];

  @Field()
  @MinLength(1)
  username!: string;

  @Field({ nullable: true })
  bio?: string;
}
</file>

<file path="src/account/graphql/service.ts">
// src/account/graphql/service.ts
import { Service } from "typedi";
import { pool } from "../../../db";
import { NewAccount, Account } from "./schema";
import { UUID, Email } from "../../common/types";

@Service()
export class AccountService {
  public async getAccount(id: UUID): Promise<Account> {
    const select = `
      SELECT
        id,
        email,
        restricted,
        data->'name' AS name,
        data->'roles' AS roles,
        data->'profile' AS profile
      FROM account
      WHERE id = $1
    `;
    const { rows } = await pool.query(select, [id]);

    if (rows.length === 0) {
      throw new Error("Account with given ID does not exist.");
    }

    const row = rows[0];
    return {
      id: row.id,
      email: row.email,
      restricted: row.restricted,
      name: row.name,
      roles: row.roles || [],
      profile: {
        username: row.profile?.username ?? "",
        bio: row.profile?.bio ?? null,
        profilePicture: row.profile?.profilePicture ?? null,
      },
    };
  }

  public async getAccountByEmail(email: Email): Promise<Account> {
    const select = `
      SELECT
        id,
        email,
        restricted,
        data->'name' as name,
        data->'roles' as roles,
        data->'profile' as profile
      FROM account
      WHERE email = $1
    `;
    const { rows } = await pool.query(select, [email]);

    if (rows.length === 0) {
      throw new Error("Account with given Email does not exist.");
    }

    const row = rows[0];
    return {
      id: row.id,
      email: row.email,
      restricted: row.restricted,
      name: row.name,
      roles: row.roles || [],
      profile: {
        username: row.profile?.username ?? "",
        bio: row.profile?.bio ?? null,
        profilePicture: row.profile?.profilePicture ?? null,
      },
    };
  }

  public async getAllAccounts(): Promise<Account[]> {
    const select = `
      SELECT
        id,
        email,
        restricted,
        data->'name' as name,
        data->'roles' as roles,
        data->'profile' as profile
      FROM account
    `;
    const { rows } = await pool.query(select);

    return rows.map((row: any) => ({
      id: row.id,
      email: row.email,
      restricted: row.restricted,
      name: row.name,
      roles: row.roles || [],
      profile: {
        username: row.profile?.username ?? "",
        bio: row.profile?.bio ?? null,
        profilePicture: row.profile?.profilePicture ?? null,
      },
    }));
  }

  public async makeAccount(info: NewAccount): Promise<Account> {
    const restrictedVal = info.roles.some(
      (role) => role.toLowerCase() === "vendor"
    );

    // Explicitly cast parameters so that PostgreSQL can infer types.
    // Update the JSON build to include 'profilePicture' as NULL by default.
    const insert = `
      INSERT INTO account (email, restricted, data)
      VALUES (
        $1::text,
        $7,
        jsonb_build_object(
          'name', jsonb_build_object(
            'first', $2::text,
            'last', $3::text
          ),
          'password', crypt($4::text, '${process.env.CRYPT_SECRET}'),
          'roles', $5::text[],
          'profile', jsonb_build_object(
            'username', $6::text,
            'bio', $8::text,
            'profilePicture', NULL
          )
        )
      )
      RETURNING id
    `;
    const values = [
      info.email,
      info.firstName,
      info.lastName,
      info.password,
      info.roles,
      info.username,
      restrictedVal,
      info.bio || null,
    ];
    const { rows } = await pool.query(insert, values);

    return {
      id: rows[0].id,
      email: info.email,
      name: { first: info.firstName, last: info.lastName },
      roles: info.roles,
      restricted: restrictedVal,
      profile: {
        username: info.username,
        bio: info.bio || undefined,
        profilePicture: undefined,
      },
    };
  }

  public async deleteAccount(id: UUID): Promise<boolean> {
    const del = `DELETE FROM account WHERE id = $1`;
    await pool.query(del, [id]);
    return true;
  }

  public async deleteAccountByEmail(email: string): Promise<boolean> {
    const del = `DELETE FROM account WHERE email = $1`;
    await pool.query(del, [email]);
    return true;
  }

  private async modifyRestricted(
    byWhat: "id" | "email",
    setTo: boolean,
    byValue: UUID | Email
  ) {
    const update = `UPDATE account SET restricted = $2 WHERE ${byWhat} = $1`;
    await pool.query(update, [byValue, setTo]);
    return true;
  }

  public async suspendAccount(id: UUID): Promise<boolean> {
    return this.modifyRestricted("id", true, id);
  }

  public async resumeAccount(id: UUID): Promise<boolean> {
    return this.modifyRestricted("id", false, id);
  }

  public async suspendAccountByEmail(email: Email): Promise<boolean> {
    return this.modifyRestricted("email", true, email);
  }

  public async resumeAccountByEmail(email: Email): Promise<boolean> {
    return this.modifyRestricted("email", false, email);
  }

  public async updateProfile(
    id: UUID,
    username?: string,
    bio?: string,
    profilePicture?: string
  ): Promise<boolean> {
    console.log("UpdateProfile input:", { id, username, bio, profilePicture });

    const select = `
      SELECT data->'profile' as profile
      FROM account
      WHERE id = $1
    `;
    const { rows } = await pool.query(select, [id]);

    if (rows.length === 0) {
      throw new Error("No account found for that ID.");
    }

    const oldProfile = rows[0].profile || {};
    // Merge new values if provided
    const newProfile = {
      ...oldProfile,
      ...(username !== undefined ? { username } : {}),
      ...(bio !== undefined ? { bio } : {}),
      ...(profilePicture !== undefined ? { profilePicture } : {}),
    };

    const updateSql = `
      UPDATE account
      SET data = jsonb_set(
        data,
        '{profile}',
        $2::jsonb,
        true
      )
      WHERE id = $1
    `;
    await pool.query(updateSql, [id, JSON.stringify(newProfile)]);
    return true;
  }
}
</file>

<file path="src/auth/graphql/resolver.ts">
// src/auth/graphql/resolver.ts
import { Resolver, Mutation, Query, Ctx, Arg } from "type-graphql";
import { Authenticated, Credentials, SessionAccount } from "./schema";
import { AuthService } from "./service";
import { Service } from "typedi";
import { Request } from "express";

@Service()
@Resolver()
export class AuthResolver {
  constructor(private readonly authService: AuthService) {}

  @Mutation(() => Authenticated)
  async login(
    @Ctx() req: Request,
    @Arg("input") creds: Credentials
  ): Promise<Authenticated> {
    const account = await this.authService.login(creds);
    if (!account) {
      throw new Error("Invalid Credentials");
    }
    return account;
  }

  @Query(() => SessionAccount)
  async check(
    @Ctx() req: Request,
    @Arg("input") accessToken: string
  ): Promise<SessionAccount> {
    return this.authService.check(accessToken);
  }
}
</file>

<file path="src/auth/graphql/schema.ts">
//Backend/src/auth/graphql/schema.ts
import { ObjectType, InputType, Field } from "type-graphql";
import {MinLength} from 'class-validator';
import {UUID, Email, Name } from '../../common/types'

@InputType()
@ObjectType()
export class Authenticated {
  @Field()
  @MinLength(1)
  id!:string

  @Field()
  name!:Name

  @Field()
  @MinLength(1)
  accessToken!:string
}

ObjectType()
export class Account {
  @Field()
  id!:UUID

  @Field()
  email!:Email

  @Field()
  name!:Name

  @Field()
  @MinLength(1)
  accessToken!:string

  // TODO: IMPLEMENT TWO TOKENS AUTH
  // @Field()
  // @MinLength(1)
  // refreshToken!:string

}

@InputType()
@ObjectType()
export class Credentials {
  @Field()
  @MinLength(1)
  email!:Email

  @Field()
  @MinLength(1)
  password!:string

}

@InputType()
@ObjectType()
export class SessionAccount {

  @Field()
  @MinLength(1)
  id!: string;

}
</file>

<file path="src/auth/graphql/service.ts">
// src/auth/graphql/service.ts
import { Service } from "typedi";
import { pool } from "../../../db";
import * as jwt from "jsonwebtoken";
import { Credentials, Authenticated, Account, SessionAccount } from "./schema";

@Service()
export class AuthService {
  private async find(creds: Credentials): Promise<Account | undefined> {
    const select = `SELECT id, email, data->'name' as name, data->'roles' as roles FROM account
      WHERE email = $1 AND
      (data->>'password') = crypt($2, '${process.env.CRYPT_SECRET}') AND restricted = FALSE`;
    const { rows } = await pool.query(select, [creds.email, creds.password]);
    if (rows.length !== 1) {
      return undefined;
    }
    return rows[0];
  }

  public async login(creds: Credentials): Promise<Authenticated | undefined> {
    const account = await this.find(creds);
    if (!account) {
      return undefined;
    }
    const accessToken = jwt.sign(
      {
        id: account.id,
      },
      process.env.MASTER_SECRET as string,
      { algorithm: "HS256" }
    );

    return { id: account.id, name: account.name, accessToken };
  }

  public async check(accessToken: string): Promise<SessionAccount> {
    return new Promise((resolve, reject) => {
      jwt.verify(
        accessToken,
        process.env.MASTER_SECRET as string,
        (err, decoded) => {
          if (err) {
            return reject(err);
          }
          const account = decoded as { id: string };
          resolve({ id: account.id });
        }
      );
    });
  }
}
</file>

<file path="src/common/decorators.ts">
// src/common/decorators/Public.ts
import "reflect-metadata";

export const IS_PUBLIC_KEY = "isPublic";

/**

- Marks a resolver method as public (i.e. does not require authentication).
 */
export function Public(): MethodDecorator {
  return (target, propertyKey, descriptor) => {
    Reflect.defineMetadata(IS_PUBLIC_KEY, true, descriptor.value!);
  };
}
</file>

<file path="src/common/types.ts">
// src/common/types.ts
import { ObjectType, Field, InputType } from "type-graphql";
import { MinLength } from "class-validator";

@ObjectType()
export class Name {
  @Field()
  @MinLength(1)
  first!: string;

  @Field()
  @MinLength(1)
  last!: string;
}

/**

- From <https://tsoa-community.github.io/docs/examples.html>
- Stringified UUIDv4.
- See [RFC 4112](https://tools.ietf.org/html/rfc4122)
- @pattern [0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}
- @format uuid
 */
export type UUID = string;

/**

- From <https://tsoa-community.github.io/docs/examples.html>
- Stringified UUIDv4.
- See [RFC 4112](https://tools.ietf.org/html/rfc4122)
- @pattern ^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$
- @format email
 */
export type Email = string;
</file>

<file path="src/database/sql/schema.sql">
--Backend/src/database/sql/schema.sql
-- 2.schema.sql
-- Enable pgcrypto for UUID generation and crypt()
CREATE EXTENSION IF NOT EXISTS pgcrypto;

DROP TABLE IF EXISTS account CASCADE;
-- Create the account table
CREATE TABLE account (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  email text UNIQUE NOT NULL,
  data jsonb NOT NULL,
  restricted boolean NOT NULL DEFAULT false
);

CREATE TABLE listing (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  owner_id uuid NOT NULL,
  data jsonb NOT NULL
);

CREATE TABLE message (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  item_owner_id uuid NOT NULL,
  sender_id uuid NOT NULL,
  data jsonb NOT NULL
);

DROP TABLE IF EXISTS orders CASCADE;

CREATE TABLE orders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- The account who placed the order
  buyer_id uuid NOT NULL,
  
  -- The account (shop or seller) fulfilling the order
  seller_id uuid NOT NULL,
  
  -- For now, we’ll store an order or shipping status as a simple text column
  shipping_status text NOT NULL DEFAULT 'pending',

  item_id uuid NOT NULL,
  
  -- Possibly a JSONB for extra data (items, totals, addresses, etc.)
  data jsonb,
  
  CONSTRAINT fk_order_buyer
    FOREIGN KEY (buyer_id)
    REFERENCES account (id)
    ON DELETE CASCADE,

  CONSTRAINT fk_order_seller
    FOREIGN KEY (seller_id)
    REFERENCES account (id)
    ON DELETE CASCADE,
  
  CONSTRAINT fk_order_item
    FOREIGN KEY (item_id)
    REFERENCES listing (id)
);
</file>

<file path="src/listing/graphql/resolver.ts">
// src/listing/graphql/resolver.ts

import { Authorized, Query, Resolver, Mutation, Arg, Int, Ctx } from "type-graphql";
import { Request } from "express";
import { ListingService } from "./service";
import { Listing, NewListing, PaginatedListings } from "./schema";
import { UUID } from "../../common/types";
import { Service } from "typedi";

@Service()
@Resolver()
export class ListingResolver {
  constructor(private readonly listingService: ListingService) {}

  @Authorized()
  @Query(() => Listing)
  async listing(
    @Ctx() _req: Request,
    @Arg("id") id: UUID
  ): Promise<Listing> {
    return this.listingService.getListing(id);
  }

  @Authorized()
  @Query(() => PaginatedListings)
  async allListings(
    @Ctx() _req: Request,
    @Arg("page", () => Int, { defaultValue: 1 }) page: number,
    @Arg("pageSize", () => Int, { defaultValue: 10 }) pageSize: number
  ): Promise<PaginatedListings> {
    return this.listingService.getAllListings(page, pageSize);
  }

  @Authorized()
  @Mutation(() => Listing)
  async createListing(
    @Arg("input") listingInfo: NewListing,
    @Ctx() _req: Request
  ): Promise<Listing> {
    return this.listingService.createListing(listingInfo);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async deleteListing(
    @Arg("id") listingId: UUID,
    @Ctx() _req: Request
  ): Promise<boolean> {
    return this.listingService.deleteListing(listingId);
  }

  @Authorized()
  @Query(() => PaginatedListings)
  async searchListings(
    @Arg("searchTerm") searchTerm: string,
    @Arg("page", () => Int, { defaultValue: 1 }) page: number,
    @Arg("pageSize", () => Int, { defaultValue: 10 }) pageSize: number
  ): Promise<PaginatedListings> {
    const { listings, totalCount } = await this.listingService.searchListings(
      searchTerm,
      page,
      pageSize
    );
    return { listings, totalCount };
  }

  // In src/listing/graphql/resolver.ts, add:
  @Authorized()
  @Mutation(() => Boolean)
  async updateListingImages(
    @Arg("id") id: UUID,
    @Arg("imageUrls", () => [String]) imageUrls: string[]
  ): Promise<boolean> {
    return this.listingService.updateListingImages(id, imageUrls);
  }

}
</file>

<file path="src/listing/graphql/schema.ts">
// src/listing/graphql/schema.ts

import { Field, InputType, ObjectType, Int } from "type-graphql";
import { MinLength } from "class-validator";
import { UUID } from "../../common/types";

@ObjectType()
export class Listing {
  @Field()
  id!: UUID;

  @Field()
  ownerId!: UUID;

  @Field()
  @MinLength(1)
  brand!: string;

  @Field()
  @MinLength(1)
  name!: string;

  @Field()
  @MinLength(1)
  description!: string;

  @Field(() => [String])
  imageUrls!: string[];
}

@InputType()
export class NewListing {
  @Field()
  ownerId!: UUID;

  @Field()
  @MinLength(1)
  brand!: string;

  @Field()
  @MinLength(1)
  name!: string;

  @Field()
  @MinLength(1)
  description!: string;

  @Field(() => [String])
  imageUrls!: string[];
}

/**

- For returning paginated listing results (listings + totalCount).
 */
@ObjectType()
export class PaginatedListings {
  @Field(() => [Listing])
  listings!: Listing[];

  @Field(() => Int)
  totalCount!: number;
}
</file>

<file path="src/listing/graphql/service.ts">
// src/listing/graphql/service.ts

import { Service } from "typedi";
import { pool } from "../../../db";
import { NewListing, Listing, PaginatedListings } from "./schema";
import { UUID } from "../../common/types";

@Service()
export class ListingService {
  /**

- Fetch all listings with pagination.
- @param page The page number (>= 1).
- @param pageSize The number of listings per page (>= 1).
- Returns { listings, totalCount }.
   */
  public async getAllListings(
    page: number = 1,
    pageSize: number = 10
  ): Promise<PaginatedListings> {
    if (page < 1) page = 1;
    if (pageSize < 1) pageSize = 10;

    const offset = (page - 1) * pageSize;

    const countResult = await pool.query(`SELECT COUNT(*) AS total FROM listing`);
    const totalCount = parseInt(countResult.rows[0].total, 10);

    const select = `
      SELECT
        id,
        owner_id as "ownerId",
        data->>'brand' as brand,
        data->>'name' as name,
        data->>'description' as description,
        data->'imageUrls' as "imageUrls"
      FROM listing
      LIMIT $1
      OFFSET $2
    `;

    const { rows } = await pool.query(select, [pageSize, offset]);

    const listings = rows.map((row: any) => ({
      ...row,
      imageUrls: row.imageUrls || [],
    }));

    return { listings, totalCount };
  }

  /**

- Get a single listing by ID.
   */
  public async getListing(id: UUID): Promise<Listing> {
    const select = `
      SELECT
        id,
        owner_id as "ownerId",
        data->>'brand' as brand,
        data->>'name' as name,
        data->>'description' as description,
        data->'imageUrls' as "imageUrls"
      FROM listing
      WHERE id = $1
    `;
    const { rows } = await pool.query(select, [id]);
    if (rows.length === 0) {
      throw new Error("Listing with given ID does not exist.");
    }
    rows[0].imageUrls = rows[0].imageUrls || [];
    return rows[0];
  }

  /**

- Create a new listing.
   */
  public async createListing(info: NewListing): Promise<Listing> {
    const insert = `
      INSERT INTO listing (owner_id, data)
      VALUES (
        $1::uuid,
        jsonb_build_object(
          'brand', $2::text,
          'name', $3::text,
          'description', $4::text,
          'imageUrls', $5::text[]
        )
      )
      RETURNING id;
    `;
    const { rows } = await pool.query(insert, [
      info.ownerId,
      info.brand,
      info.name,
      info.description,
      info.imageUrls,
    ]);

    return {
      id: rows[0].id,
      ownerId: info.ownerId,
      brand: info.brand,
      name: info.name,
      description: info.description,
      imageUrls: info.imageUrls,
    };
  }

  /**

- Delete a listing by ID.
   */
  public async deleteListing(id: UUID): Promise<boolean> {
    const del = `DELETE FROM listing WHERE id = $1`;
    await pool.query(del, [id]);
    return true;
  }

  /**

- Search by substring in brand/name/description (case-insensitive) with pagination.
   */
  public async searchListings(
    searchTerm: string,
    page: number = 1,
    pageSize: number = 10
  ): Promise<PaginatedListings> {
    if (page < 1) page = 1;
    if (pageSize < 1) pageSize = 10;

    const ilikeValue = `%${searchTerm}%`;

    const countSql = `
      SELECT COUNT(*) AS total
      FROM listing
      WHERE
        (data->>'brand') ILIKE $1
        OR (data->>'name') ILIKE $1
        OR (data->>'description') ILIKE $1
    `;
    const countResult = await pool.query(countSql, [ilikeValue]);
    const totalCount = parseInt(countResult.rows[0].total, 10);

    const offset = (page - 1) * pageSize;
    const selectSql = `
      SELECT
        id,
        owner_id AS "ownerId",
        data->>'brand' AS brand,
        data->>'name' AS name,
        data->>'description' AS description,
        data->'imageUrls' AS "imageUrls"
      FROM listing
      WHERE
        (data->>'brand') ILIKE $1
        OR (data->>'name') ILIKE $1
        OR (data->>'description') ILIKE $1
      LIMIT $2
      OFFSET $3
    `;

    const { rows } = await pool.query(selectSql, [ilikeValue, pageSize, offset]);

    const listings = rows.map((r: any) => ({
      ...r,
      imageUrls: r.imageUrls || [],
    }));

    return { listings, totalCount };
  }

  // In src/listing/graphql/service.ts, add:
  public async updateListingImages(id: UUID, imageUrls: string[]): Promise<boolean> {
    const updateSql = `
      UPDATE listing
      SET data = jsonb_set(
        data,
        '{imageUrls}',
        $2::jsonb,
        true
      )
      WHERE id = $1
    `;
    await pool.query(updateSql, [id, JSON.stringify(imageUrls)]);
    return true;
  }

}
</file>

<file path="src/message/graphql/resolver.ts">
// src/message/graphql/resolver.ts

import { Authorized, Query, Resolver, Ctx, Mutation, Arg } from "type-graphql";
import { Request } from "express";
import { MessageService } from "./service";
import { Message, NewMessage } from "./schema";
import { UUID } from "../../common/types";
import { Service } from "typedi";

@Service()
@Resolver()
export class MessageResolver {
  constructor(private readonly messageService: MessageService) {}

  @Authorized()
  @Query(() => Message)
  async message(
    @Ctx() _req: Request,
    @Arg("input") id: UUID
  ): Promise<Message> {
    return this.messageService.getMessage(id);
  }

  @Authorized()
  @Query(() => [Message])
  async messagesByItemOwner(
    @Ctx() _req: Request,
    @Arg("input") itemOwnerId: UUID
  ): Promise<Message[]> {
    return this.messageService.getMessagesByItemOwner(itemOwnerId);
  }

  @Authorized()
  @Query(() => [Message])
  async messagesBySender(
    @Ctx() _req: Request,
    @Arg("input") senderId: UUID
  ): Promise<Message[]> {
    return this.messageService.getMessagesBySender(senderId);
  }

  @Authorized()
  @Mutation(() => Message)
  async createMessage(
    @Arg("input") messageInfo: NewMessage,
    @Ctx() _req: Request
  ): Promise<Message> {
    return this.messageService.createMessage(messageInfo);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async deleteMessage(
    @Arg("input") messageId: UUID,
    @Ctx() _req: Request
  ): Promise<boolean> {
    return this.messageService.deleteMessage(messageId);
  }
}
</file>

<file path="src/message/graphql/schema.ts">
// src/message/graphql/schema.ts

import { Field, InputType, ObjectType } from "type-graphql";
import { MinLength } from "class-validator";
import { UUID } from "../../common/types";

@ObjectType()
export class Message {
  @Field()
  id!: UUID;

  @Field()
  itemOwnerId!: UUID;

  @Field()
  senderId!: UUID;

  @Field()
  @MinLength(1)
  content!: string;
}

@InputType()
export class NewMessage {
  @Field()
  itemOwnerId!: UUID;

  @Field()
  senderId!: UUID;

  @Field()
  @MinLength(1)
  content!: string;
}
</file>

<file path="src/message/graphql/service.ts">
// src/message/graphql/service.ts

import { Service } from "typedi";
import { pool } from "../../../db";
import { NewMessage, Message } from "./schema";
import { UUID } from "../../common/types";

@Service()
export class MessageService {
  public async getMessage(id: UUID): Promise<Message> {
    const select = `
      SELECT id,
             item_owner_id as "itemOwnerId",
             sender_id as "senderId",
             data->>'content' as content
      FROM message
      WHERE id = $1
    `;
    const { rows } = await pool.query(select, [id]);
    if (rows.length === 0) {
      throw new Error("Message not found.");
    }
    return rows[0];
  }

  public async getMessagesByItemOwner(itemOwnerId: UUID): Promise<Message[]> {
    const select = `
      SELECT id,
             item_owner_id as "itemOwnerId",
             sender_id as "senderId",
             data->>'content' as content
      FROM message
      WHERE item_owner_id = $1
    `;
    const { rows } = await pool.query(select, [itemOwnerId]);
    return rows;
  }

  public async getMessagesBySender(senderId: UUID): Promise<Message[]> {
    const select = `
      SELECT id,
             item_owner_id as "itemOwnerId",
             sender_id as "senderId",
             data->>'content' as content
      FROM message
      WHERE sender_id = $1
    `;
    const { rows } = await pool.query(select, [senderId]);
    return rows;
  }

  public async createMessage(info: NewMessage): Promise<Message> {
    const insert = `
      INSERT INTO message(item_owner_id, sender_id, data)
      VALUES ($1::uuid, $2::uuid, jsonb_build_object('content', $3::text))
      RETURNING id;
    `;
    const { rows } = await pool.query(insert, [
      info.itemOwnerId,
      info.senderId,
      info.content,
    ]);
    return {
      id: rows[0].id,
      itemOwnerId: info.itemOwnerId,
      senderId: info.senderId,
      content: info.content,
    };
  }

  public async deleteMessage(id: UUID): Promise<boolean> {
    const del = `DELETE FROM message WHERE id = $1`;
    await pool.query(del, [id]);
    return true;
  }
}
</file>

<file path="src/orders/graphql/resolver.ts">
// src/orders/graphql/resolver.ts

import { Authorized, Resolver, Query, Mutation, Arg } from "type-graphql";
import { OrderService } from "./service";
import { Order, NewOrder, UUID, ShippingStatus } from "./schema";

@Resolver()
export class OrderResolver {
  private readonly orderService = new OrderService();

  @Authorized()
  @Query(() => Order)
  async order(@Arg("id") id: UUID): Promise<Order> {
    return this.orderService.getOrder(id);
  }

  @Authorized()
  @Query(() => [Order])
  async allOrders(): Promise<Order[]> {
    return this.orderService.getAllOrders();
  }

  @Authorized()
  @Mutation(() => Order)
  async createOrder(@Arg("input") input: NewOrder): Promise<Order> {
    return this.orderService.createOrder(input);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async deleteOrder(@Arg("id") id: UUID): Promise<boolean> {
    return this.orderService.deleteOrder(id);
  }

  @Authorized()
  @Mutation(() => Boolean)
  async updateOrderStatus(
    @Arg("id") id: UUID,
    @Arg("status", () => ShippingStatus) status: ShippingStatus
  ): Promise<boolean> {
    return this.orderService.updateShippingStatus(id, status);
  }
}
</file>

<file path="src/orders/graphql/schema.ts">
//Backend/src/orders/graphql/schema.ts
import { Field, InputType, ObjectType, registerEnumType } from "type-graphql";
import { MinLength } from "class-validator";

/**

- From your listing schema example:
- @pattern [0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}
- @format uuid
 */
export type UUID = string;

/**

- Example shipping statuses. Feel free to add or change these.
 */
export enum ShippingStatus {
  PENDING = "PENDING",
  SHIPPED = "SHIPPED",
  DELIVERED = "DELIVERED",
  CANCELLED = "CANCELLED",
}

/**

- Let TypeGraphQL know about our enum so it can generate correct schema types.
 */
registerEnumType(ShippingStatus, {
  name: "ShippingStatus",
});

@ObjectType()
export class Order {
  @Field()
  id!: UUID;

  // The account who placed the order
  @Field()
  buyerId!: UUID;

  // The account fulfilling the order (e.g. vendor or seller)
  @Field()
  sellerId!: UUID;

  @Field()
  itemId!: UUID;

  // Current shipping status of the order
  @Field(() => ShippingStatus)
  shippingStatus!: ShippingStatus;

  // Optionally store extra info
  // e.g., items, addresses, timestamps, etc.
  @Field({ nullable: true })
  data?: string;
}

@InputType()
export class NewOrder {
  @Field()
  buyerId!: UUID;

  @Field()
  sellerId!: UUID;

  @Field()
  itemId!: UUID; // ensure you capture itemId if needed

  @Field(() => ShippingStatus, { nullable: true })
  shippingStatus?: ShippingStatus;

  @Field({ nullable: true })
  @MinLength(1)
  data?: string;
}
</file>

<file path="src/orders/graphql/service.ts">
//Backend/src/orders/graphql/service.ts
import { pool } from '../../../db';
import { NewOrder, Order, ShippingStatus, UUID } from './schema';

export class OrderService {
  /**

- Fetch a single order by id.
   */
  public async getOrder(id: UUID): Promise<Order> {
    const select = `
      SELECT
        id,
        buyer_id,
        seller_id,
        item_id,
        shipping_status,
        data
      FROM orders
      WHERE id = $1
    `;
    const query = {
      text: select,
      values: [id],
    };
    const { rows } = await pool.query(query);

    if (rows.length === 0) {
      throw new Error('Order with given ID does not exist.');
    }

    // Convert row to Order object
    const row = rows[0];
    return {
      id: row.id,
      buyerId: row.buyer_id,
      sellerId: row.seller_id,
      itemId: row.item_id,
      shippingStatus: row.shipping_status as ShippingStatus,
      data: row.data || undefined,
    };
  }

  /**

- Fetch all orders in the system (or optionally filter).
   */
  public async getAllOrders(): Promise<Order[]> {
    const select = `
      SELECT
        id,
        buyer_id,
        seller_id,
        item_id,
        shipping_status,
        data
      FROM orders
    `;
    const { rows } = await pool.query(select);

    return rows.map((row) => ({
      id: row.id,
      buyerId: row.buyer_id,
      sellerId: row.seller_id,
      itemId: row.item_id,
      shippingStatus: row.shipping_status as ShippingStatus,
      data: row.data || undefined,
    }));
  }

  /**

- Create a new order in the DB.
- shippingStatus defaults to 'PENDING' if not provided.
   */
  public async createOrder(info: NewOrder): Promise<Order> {
    const status = info.shippingStatus || ShippingStatus.PENDING;

    const insert = `
      INSERT INTO orders (buyer_id, seller_id, shipping_status, item_id, data)
      VALUES ($1::uuid, $2::uuid, $3::text, $4::uuid, $5::jsonb)
      RETURNING id
    `;
    const query = {
      text: insert,
      values: [
        info.buyerId,
        info.sellerId,
        status,
        info.itemId, // <--- pass the itemId now
        info.data ? JSON.stringify(info.data) : null,
      ],
    };
    
    const { rows } = await pool.query(query);
    const id = rows[0].id as UUID;
  
    return {
      id,
      buyerId: info.buyerId,
      sellerId: info.sellerId,
      itemId: info.itemId,
      shippingStatus: status,
      data: info.data,
    };
  }

  /**

- Delete an order by id.
- Returns true if deleted successfully, false if not found (optional).
   */
  public async deleteOrder(id: UUID): Promise<boolean> {
    const del = `
      DELETE FROM orders
      WHERE id = $1
    `;
    const query = {
      text: del,
      values: [id],
    };

    const result = await pool.query(query);
    // result.rowCount === 1 if a row was deleted
    return result.rowCount === 1;
  }

  /**

- Update the shipping status for a given order.
   */
  public async updateShippingStatus(
    id: UUID,
    newStatus: ShippingStatus
  ): Promise<boolean> {
    const update = `
      UPDATE orders
      SET shipping_status = $2
      WHERE id = $1
    `;
    const query = {
      text: update,
      values: [id, newStatus],
    };

    const result = await pool.query(query);
    return result.rowCount === 1; // true if an order was updated
  }
}
</file>

<file path="src/s3/graphql/resolver.ts">
// src/s3/graphql/resolver.ts
import { Service } from "typedi";
import { Resolver, Mutation, Arg } from "type-graphql";
import { S3UploadUrl } from "./schema";
import { getPresignedUploadUrl } from "./service";

@Service()
@Resolver()
export class S3Resolver {
  /**

- Generate a pre-signed URL for uploading an image.
- @param fileName - original filename (used as a base)
- @param contentType - the MIME type of the file (e.g. image/jpeg)
- @param folder - a folder string to separate profile images and listing images (e.g. "profile" or "listing")
   */
  @Mutation(() => S3UploadUrl)
  async generateUploadUrl(
    @Arg("fileName") fileName: string,
    @Arg("contentType") contentType: string,
    @Arg("folder") folder: string
  ): Promise<S3UploadUrl> {
    // Generate a unique key – here we prefix the filename with folder and a timestamp.
    const key = `${folder}/${Date.now()}_${fileName}`;
    console.log("[S3Resolver] Request received to generate upload URL for key:", key, "with content type:", contentType);

    try {
      const preSignedUrl = await getPresignedUploadUrl(key, contentType);
      const fileUrl = `https://${process.env.AWS_S3_BUCKET}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}`;
      console.log("[S3Resolver] Pre-signed URL generated successfully:", preSignedUrl);
      console.log("[S3Resolver] File URL will be:", fileUrl);
      return { preSignedUrl, fileUrl };
    } catch (error) {
      console.error("[S3Resolver] Error generating upload URL:", error);
      throw error;
    }
  }
}
</file>

<file path="src/s3/graphql/schema.ts">
// Backend/src/s3/graphql/schema.ts
import { ObjectType, Field, InputType } from "type-graphql";

@ObjectType()
export class S3UploadUrl {
  @Field()
  preSignedUrl!: string;

  @Field()
  fileUrl!: string;
}
</file>

<file path="src/s3/graphql/service.ts">
// src/s3/graphql/s3service.ts
import AWS from 'aws-sdk';

AWS.config.update({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  region: process.env.AWS_REGION!,
});

const s3 = new AWS.S3();

export async function getPresignedUploadUrl(key: string, contentType: string, expiresIn = 60): Promise<string> {
  const params = {
    Bucket: process.env.AWS_S3_BUCKET!,
    Key: key,
    Expires: expiresIn,
    ContentType: contentType,
  };

  console.log("[s3service] Generating pre-signed URL with params:", params);

  try {
    const url = await s3.getSignedUrlPromise('putObject', params);
    console.log("[s3service] Pre-signed URL generated successfully:", url);
    return url;
  } catch (error) {
    console.error("[s3service] Error generating pre-signed URL:", error);
    throw error;
  }
}
</file>

<file path="tests/domains/account/account.test.ts">
// tests/domains/account/account.test.ts

import * as http from "http";
import supertest from "supertest";
import { createApp } from "../../../index";
import { resetGlobal, shutdown } from "../common/db/reset";

let server: http.Server;
let token = "";

beforeAll(async () => {
  // Reset the test database using global fixtures.
  await resetGlobal();
  const app = await createApp();
  server = http.createServer(app);
  server.listen(0);

  // Login (using the mutation) to get a token for protected operations.
  const loginResponse = await supertest(server)
    .post("/graphql")
    .send({
      query: `
        mutation login {
          login(input: { email: "test@example.com", password: "password" }) {
            accessToken
          }
        }
      `
    });
  if (!loginResponse.body.data || !loginResponse.body.data.login) {
    throw new Error(`Login failed. Response: ${JSON.stringify(loginResponse.body)}`);
  }
  token = loginResponse.body.data.login.accessToken;
}, 10000);

afterAll((done) => {
  // Shutdown the DB pool and then close the HTTP server.
  shutdown(() => {
    server.close(done);
  });
});

let id = "";

describe("Account Resolver Tests", () => {
  it("Can get member by ID", async () => {
    // This fixed ID is seeded via the global fixtures.
    const seededId = "00000000-0000-0000-0000-000000000001";
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          account(input: "${seededId}") {
            id
            name { first last }
            email
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.account.email).toBe("<sammy@slugmart.com>");
        expect(res.body.data.account.name.first).toBe("Sammy");
        expect(res.body.data.account.name.last).toBe("Slug");
      });
  });

  it("Cant get member by non-existent ID", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          account(input: "10000000-0000-0000-0000-000000000000") {
            id
            name { first last }
            email
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  it("Can get member by email", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          accountByEmail(input: "sammy@slugmart.com") {
            id
            name { first last }
            email
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.accountByEmail.email).toBe("<sammy@slugmart.com>");
        expect(res.body.data.accountByEmail.name.first).toBe("Sammy");
        expect(res.body.data.accountByEmail.name.last).toBe("Slug");
      });
  });

  it("Cant get member by non-existent email", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          accountByEmail(input: "noEmail@slugmart.com") {
            id
            name { first last }
            email
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  // "makeAccount" is a public operation.
  it("Can make account", async () => {
    await supertest(server)
      .post("/graphql")
      .send({
        query: `mutation m {
          makeAccount(input: {
            email: "SlugAdmin@mart.com",
            password: "abc",
            firstName: "Slug",
            lastName: "min",
            username: "slugadmin",
            roles: ["Admin", "Shopper"]
          }) {
            id
            email
            name { first last }
            roles
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.makeAccount.email).toBe("<slugadmin@mart.com>");
        expect(res.body.data.makeAccount.name.first).toBe("Slug");
        expect(res.body.data.makeAccount.name.last).toBe("min");
        id = res.body.data.makeAccount.id;
        expect(id).toBeTruthy();
      });
  });

  it("Cant make account with same email address", async () => {
    await supertest(server)
      .post("/graphql")
      .send({
        query: `mutation m {
          makeAccount(input: {
            email: "SlugAdmin@mart.com",
            password: "abc",
            firstName: "Slug",
            lastName: "min",
            username: "slugadmin",
            roles: ["Admin", "Shopper"]
          }) {
            id
            email
            name { first last }
            roles
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  it("Can delete account", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation delete {
          deleteAccount(input: "${id}")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.deleteAccount).toBe(true);
      });
  });

  it("Member should no longer exist", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          account(input: "${id}") {
            id
            name { first last }
            email
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  // Re-create the account for further suspend/resume tests.
  it("Make another account", async () => {
    await supertest(server)
      .post("/graphql")
      .send({
        query: `mutation m {
          makeAccount(input: {
            email: "SlugAdmin@mart.com",
            password: "abc",
            firstName: "Slug",
            lastName: "min",
            username: "slugadmin",
            roles: ["Admin", "Shopper"]
          }) {
            id
            email
            name { first last }
            roles
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.makeAccount.email).toBe("<slugadmin@mart.com>");
        expect(res.body.data.makeAccount.name.first).toBe("Slug");
        expect(res.body.data.makeAccount.name.last).toBe("min");
        id = res.body.data.makeAccount.id;
        expect(id).toBeTruthy();
      });
  });

  it("Can delete account by email", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation delete {
          deleteAccountByEmail(input: "SlugAdmin@mart.com")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.deleteAccountByEmail).toBe(true);
      });
  });

  it("Member should no longer exist (by email)", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          accountByEmail(input: "slugadmin@mart.com") {
            id
            name { first last }
            email
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  // Re-create the account again for suspend/resume tests.
  it("Make another account (again)", async () => {
    await supertest(server)
      .post("/graphql")
      .send({
        query: `mutation m {
          makeAccount(input: {
            email: "SlugAdmin@mart.com",
            password: "abc",
            firstName: "Slug",
            lastName: "min",
            username: "slugadmin",
            roles: ["Admin", "Shopper"]
          }) {
            id
            email
            name { first last }
            roles
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.makeAccount.email).toBe("<slugadmin@mart.com>");
        expect(res.body.data.makeAccount.name.first).toBe("Slug");
        expect(res.body.data.makeAccount.name.last).toBe("min");
        id = res.body.data.makeAccount.id;
        expect(id).toBeTruthy();
      });
  });

  it("Can suspend account by ID", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation suspend {
          suspendAccount(input: "${id}")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.suspendAccount).toBe(true);
      });
  });

  it("Account should be suspended", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          account(input: "${id}") {
            id
            name { first last }
            email
            restricted
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.account.restricted).toBe(true);
      });
  });

  it("Can resume account by ID", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation resume {
          resumeAccount(input: "${id}")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.resumeAccount).toBe(true);
      });
  });

  it("Account should not be suspended", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          account(input: "${id}") {
            id
            name { first last }
            email
            restricted
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.account.restricted).toBe(false);
      });
  });

  it("Can suspend account by email", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation suspend {
          suspendAccountByEmail(input: "slugadmin@mart.com")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.suspendAccountByEmail).toBe(true);
      });
  });

  it("Account should be suspended (by email)", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          accountByEmail(input: "slugadmin@mart.com") {
            id
            name { first last }
            email
            restricted
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.accountByEmail.restricted).toBe(true);
      });
  });

  it("Can resume account by email", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation resume {
          resumeAccountByEmail(input: "slugadmin@mart.com")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.resumeAccountByEmail).toBe(true);
      });
  });

  it("Account should not be suspended (by email)", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          accountByEmail(input: "slugadmin@mart.com") {
            id
            name { first last }
            email
            restricted
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.accountByEmail.restricted).toBe(false);
      });
  });

  it("Can get all accounts", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query g {
          allAccounts {
            id
            email
            name { first last }
            roles
            restricted
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(Array.isArray(res.body.data.allAccounts)).toBe(true);
        expect(res.body.data.allAccounts.length).toBeGreaterThan(0);
      });
  });
});
</file>

<file path="tests/domains/auth/check.test.ts">
// tests/domains/auth/check.test.ts

import { gql, request } from "graphql-request";
import * as http from "http";
import { AddressInfo } from "net";
import { createApp } from "../../../index";
import { resetGlobal, shutdown } from "../common/db/reset";

let server: http.Server;
let endpoint: string;

beforeAll(async () => {
  await resetGlobal();
  const app = await createApp();
  server = http.createServer(app);
  await new Promise<void>((resolve) => {
    server.listen(0, () => {
      const address = server.address() as AddressInfo;
      endpoint = `http://localhost:${address.port}/graphql`;
      resolve();
    });
  });
}, 10000);

afterAll((done) => {
  shutdown(() => server.close(done));
});

interface LoginForCheckResponse {
  login: {
    id: string;
    accessToken: string;
  };
}

interface CheckResponse {
  check: {
    id: string;
  };
}

describe("AuthService check", () => {
  let accessToken: string;
  beforeAll(async () => {
    const loginQuery = gql`
      mutation Login($input: Credentials!) {
        login(input: $input) {
          id
          accessToken
        }
      }
    `;
    const variables = {
      input: { email: "<test@example.com>", password: "password" },
    };
    const response = await request<LoginForCheckResponse>(
      endpoint,
      loginQuery,
      variables
    );
    accessToken = response.login.accessToken;
  });

  it("should return an account id with a valid token", async () => {
    const checkQuery = gql`
      query Check($input: String!) {
        check(input: $input) {
          id
        }
      }
    `;
    const checkVars = { input: accessToken };

    const checkResponse = await request<CheckResponse>(
      endpoint,
      checkQuery,
      checkVars,
      { authorization: `Bearer ${accessToken}` }
    );

    expect(checkResponse.check.id).toBeTruthy();
  });
});
</file>

<file path="tests/domains/auth/login.test.ts">
// tests/domains/auth/login.test.ts

import { gql, request } from "graphql-request";
import * as http from "http";
import { AddressInfo } from "net";
import { createApp } from "../../../index";
import { resetGlobal, shutdown } from "../common/db/reset";

let server: http.Server;
let endpoint = "";

beforeAll(async () => {
  await resetGlobal();
  const app = await createApp();
  server = http.createServer(app);
  await new Promise<void>((resolve) => {
    server.listen(0, () => {
      const address = server.address() as AddressInfo;
      endpoint = `http://localhost:${address.port}/graphql`;
      resolve();
    });
  });
}, 10000);

afterAll((done) => {
  shutdown(() => server.close(done));
});

interface LoginResponse {
  login: {
    id: string;
    name: { first: string; last: string };
    accessToken: string;
  };
}

describe("AuthService login", () => {
  it("should login with valid credentials", async () => {
    const query = gql`
      mutation Login($input: Credentials!) {
        login(input: $input) {
          id
          name {
            first
            last
          }
          accessToken
        }
      }
    `;
    const variables = {
      input: { email: "<test@example.com>", password: "password" },
    };
    const response = await request<LoginResponse>(endpoint, query, variables);
    expect(response.login).toBeDefined();
    expect(response.login.id).toBeTruthy();
    expect(response.login.name.first).toBe("John");
    expect(response.login.name.last).toBe("Doe");
    expect(response.login.accessToken).toBeTruthy();
  });

  it("should return an error for invalid credentials", async () => {
    const query = gql`
      mutation Login($input: Credentials!) {
        login(input: $input) {
          id
          name {
            first
            last
          }
          accessToken
        }
      }
    `;
    const variables = {
      input: { email: "<wrong@example.com>", password: "wrongpass" },
    };
    // Expect the promise to be rejected with an error message containing "Invalid Credentials"
    await expect(request<LoginResponse>(endpoint, query, variables))
      .rejects.toThrow(/Invalid Credentials/);
  });
});
</file>

<file path="tests/domains/common/db/reset.ts">
// tests/domains/common/db/reset.ts

import { pool } from "../../../../db";
import dotenv from "dotenv";
import *as fs from "fs";
import* as path from "path";

dotenv.config();

async function runSqlFile(filePath: string): Promise<void> {
  const content = fs.readFileSync(filePath, "utf8");
  await pool.query(content);
  console.log(`Executed SQL file: ${filePath}`);
}

/**

- Resets the entire test database using the global fixtures.
 */
export async function resetGlobal(): Promise<void> {
  const fixturesPath = path.join(__dirname, "..", "..", "..", "fixtures");
  const schemaFile = path.join(fixturesPath, "schema.sql");
  const dataFile = path.join(fixturesPath, "data.sql");

  if (fs.existsSync(schemaFile)) {
    await runSqlFile(schemaFile);
  } else {
    throw new Error(`Global schema file not found at: ${schemaFile}`);
  }

  if (fs.existsSync(dataFile)) {
    await runSqlFile(dataFile);
  } else {
    throw new Error(`Global data file not found at: ${dataFile}`);
  }
}

/**

- Shut down the pool entirely.
 */
export function shutdown(done: Function): void {
  pool.end(() => done());
}
</file>

<file path="tests/domains/listing/listing.test.ts">
import * as http from "http";
import supertest from "supertest";
import { createApp } from "../../../index";
import { resetGlobal, shutdown } from "../common/db/reset";

let server: http.Server;
let token = "";

beforeAll(async () => {
  await resetGlobal();
  const app = await createApp();
  server = http.createServer(app);
  server.listen(0);

  // Login to obtain a valid token for protected operations
  const loginResponse = await supertest(server)
    .post("/graphql")
    .send({
      query: `
        query login {
          login(input: { email: "test@example.com", password: "password" }) {
            accessToken
          }
        }
      `
    });
  token = loginResponse.body.data.login.accessToken;
}, 10000);

afterAll((done) => {
  shutdown(() => server.close(done));
});

let createdListingId = "";

describe("Listing Resolver Tests", () => {
  it("Can get listing by ID", async () => {
    // Use a fixed seeded listing ID from the global fixtures
    const existingId = "00000000-0000-0000-0000-000000000010";
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          listing(id: "${existingId}") {
            id
            ownerId
            brand
            name
            description
            imageUrls
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.listing.id).toBe(existingId);
        expect(res.body.data.listing.brand).toBe("TestBrand");
        expect(res.body.data.listing.name).toBe("TestName");
        expect(res.body.data.listing.description).toBe("A test description");
        expect(Array.isArray(res.body.data.listing.imageUrls)).toBe(true);
      });
  });

  it("Cant get listing by non-existent ID", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          listing(id: "10000000-0000-0000-0000-000000000000") {
            id
            ownerId
            brand
            name
            description
            imageUrls
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  it("Can get all listings (paginated)", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `
          query getAllListings {
            allListings(page: 1, pageSize: 10) {
              listings {
                id
                ownerId
                brand
                name
                description
                imageUrls
              }
              totalCount
            }
          }
        `
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const data = res.body.data.allListings;
        expect(data).toBeDefined();
        expect(Array.isArray(data.listings)).toBe(true);
        expect(data.listings.length).toBeGreaterThan(0);
        expect(typeof data.totalCount).toBe("number");
        expect(data.totalCount).toBeGreaterThan(0);
      });
  });

  it("Can create a new listing", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation create {
          createListing(input: {
            ownerId: "00000000-0000-0000-0000-000000000001",
            brand: "NewBrand",
            name: "NewItem",
            description: "Brand new test item",
            imageUrls: ["http://example.com/image1.jpg", "http://example.com/image2.jpg"]
          }) {
            id
            ownerId
            brand
            name
            description
            imageUrls
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const listing = res.body.data.createListing;
        expect(listing.id).toBeDefined();
        expect(listing.ownerId).toBe("00000000-0000-0000-0000-000000000001");
        expect(listing.brand).toBe("NewBrand");
        expect(listing.name).toBe("NewItem");
        expect(listing.description).toBe("Brand new test item");
        expect(listing.imageUrls.length).toBe(2);
        createdListingId = listing.id;
      });
  });

  it("Can delete listing", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation delete {
          deleteListing(id: "${createdListingId}")
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.deleteListing).toBe(true);
      });
  });

  it("Deleted listing should no longer exist", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          listing(id: "${createdListingId}") {
            id
            ownerId
            brand
            name
            description
            imageUrls
          }
        }`
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });

  it("Can search for listings by partial brand", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `
          query search {
            searchListings(searchTerm: "test", page: 1, pageSize: 10) {
              listings {
                id
                brand
              }
              totalCount
            }
          }
        `
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const data = res.body.data.searchListings;
        expect(data).toBeDefined();
        expect(data.totalCount).toBeGreaterThan(0);
        expect(data.listings.length).toBeGreaterThan(0);
        const first = data.listings[0];
        expect(first.brand.toLowerCase()).toContain("test");
      });
  });

  it("Returns empty search results if no listing matches", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `
          query search {
            searchListings(searchTerm: "xyzzznotfound", page: 1, pageSize: 10) {
              listings {
                id
                brand
                name
              }
              totalCount
            }
          }
        `
      })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const data = res.body.data.searchListings;
        expect(data.totalCount).toBe(0);
        expect(data.listings.length).toBe(0);
      });
  });

  it("Can search with pagination", async () => {
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `
          query search {
            searchListings(searchTerm: "test", page: 1, pageSize: 1) {
              listings {
                id
                brand
                name
              }
              totalCount
            }
          }
        `
      })
      .expect(200)
      .then(async (res) => {
        expect(res.body.errors).toBeUndefined();
        const data = res.body.data.searchListings;
        expect(data.totalCount).toBeGreaterThanOrEqual(1);
        expect(data.listings.length).toBeLessThanOrEqual(1);
        const secondPageRes = await supertest(server)
          .post("/graphql")
          .set("Authorization", `Bearer ${token}`)
          .send({
            query: `
              query search2 {
                searchListings(searchTerm: "test", page: 2, pageSize: 1) {
                  listings {
                    id
                    brand
                    name
                  }
                  totalCount
                }
              }
            `
          });
        expect(secondPageRes.body.errors).toBeUndefined();
        const secondData = secondPageRes.body.data.searchListings;
        if (data.totalCount > 1) {
          expect(secondData.listings.length).toBe(1);
        } else {
          expect(secondData.listings.length).toBe(0);
        }
      });
  });
});
</file>

<file path="tests/domains/message/message.test.ts">
import * as http from "http";
import supertest from "supertest";
import { createApp } from "../../../index";
import { resetGlobal, shutdown } from "../common/db/reset";

let server: http.Server;
let token = "";

beforeAll(async () => {
  await resetGlobal();
  const app = await createApp();
  server = http.createServer(app);
  server.listen(0);

  // Login to obtain a valid token for protected operations
  const loginResponse = await supertest(server)
    .post("/graphql")
    .send({
      query: `
        query login {
          login(input: { email: "test@example.com", password: "password" }) {
            accessToken
          }
        }
      `
    });
  token = loginResponse.body.data.login.accessToken;
}, 10000);

afterAll((done) => {
  shutdown(() => server.close(done));
});

let createdMessageId = "";
const existingItemOwnerId = "00000000-0000-0000-0000-000000000010";
const existingSenderId = "00000000-0000-0000-0000-000000000002";

describe("Message Resolver Tests", () => {
  it("Can create a new message", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation create {
          createMessage(input: {
            itemOwnerId: "${existingItemOwnerId}",
            senderId: "${existingSenderId}",
            content: "Hello, is this item still available?"
          }) {
            id
            itemOwnerId
            senderId
            content
          }
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeUndefined();
    const msg = res.body.data.createMessage;
    expect(msg.id).toBeDefined();
    expect(msg.itemOwnerId).toBe(existingItemOwnerId);
    expect(msg.senderId).toBe(existingSenderId);
    expect(msg.content).toBe("Hello, is this item still available?");
    createdMessageId = msg.id;
  });

  it("Can get message by ID", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          message(input: "${createdMessageId}") {
            id
            itemOwnerId
            senderId
            content
          }
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeUndefined();
    const msg = res.body.data.message;
    expect(msg.id).toBe(createdMessageId);
    expect(msg.itemOwnerId).toBe(existingItemOwnerId);
    expect(msg.senderId).toBe(existingSenderId);
    expect(msg.content).toBe("Hello, is this item still available?");
  });

  it("Can get messages by itemOwnerId", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          messagesByItemOwner(input: "${existingItemOwnerId}") {
            id
            itemOwnerId
            senderId
            content
          }
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeUndefined();
    const msgs = res.body.data.messagesByItemOwner;
    expect(Array.isArray(msgs)).toBe(true);
    expect(msgs.length).toBeGreaterThan(0);
    expect(msgs.some((m: any) => m.id === createdMessageId)).toBe(true);
  });

  it("Can get messages by senderId", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          messagesBySender(input: "${existingSenderId}") {
            id
            itemOwnerId
            senderId
            content
          }
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeUndefined();
    const msgs = res.body.data.messagesBySender;
    expect(Array.isArray(msgs)).toBe(true);
    expect(msgs.length).toBeGreaterThan(0);
    expect(msgs.some((m: any) => m.id === createdMessageId)).toBe(true);
  });

  it("Cant get message by non-existent ID", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          message(input: "10000000-0000-0000-0000-000000000000") {
            id
            itemOwnerId
            senderId
            content
          }
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeDefined();
    expect(res.body.errors.length).toBeGreaterThan(0);
  });

  it("Can delete message", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `mutation del {
          deleteMessage(input: "${createdMessageId}")
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeUndefined();
    expect(res.body.data.deleteMessage).toBe(true);
  });

  it("Deleted message should no longer exist", async () => {
    const res = await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({
        query: `query get {
          message(input: "${createdMessageId}") {
            id
            itemOwnerId
            senderId
            content
          }
        }`
      })
      .expect(200);
    expect(res.body.errors).toBeDefined();
    expect(res.body.errors.length).toBeGreaterThan(0);
  });
});
</file>

<file path="tests/domains/orders/orders.test.ts">
import * as http from "http";
import supertest from "supertest";
import { createApp } from "../../../index";
import { resetGlobal, shutdown } from "../common/db/reset";

let orderId = "";
let server: http.Server;
let token = "";

beforeAll(async () => {
  await resetGlobal();
  const app = await createApp();
  server = http.createServer(app);
  server.listen(0);

  // Login to obtain a valid token for protected operations
  const loginResponse = await supertest(server)
    .post("/graphql")
    .send({
      query: `
        query login {
          login(input: { email: "test@example.com", password: "password" }) {
            accessToken
          }
        }
      `
    });
  token = loginResponse.body.data.login.accessToken;
}, 10000);

afterAll((done) => {
  shutdown(() => server.close(done));
});

describe("Order Resolver Tests", () => {
  it("Can create a new order", async () => {
    const buyerId = "00000000-0000-0000-0000-000000000002"; // from global seed
    const sellerId = "00000000-0000-0000-0000-000000000001"; // from global seed
    const itemId = "00000000-0000-0000-0000-000000000010"; // seeded listing
    const mutation = `
      mutation create {
        createOrder(input: {
          buyerId: "${buyerId}",
          sellerId: "${sellerId}",
          itemId: "${itemId}",
          shippingStatus: PENDING,
          data: "LineItems or JSON data"
        }) {
          id
          buyerId
          sellerId
          shippingStatus
          data
        }
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query: mutation })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const created = res.body.data.createOrder;
        expect(created).toBeDefined();
        expect(created.buyerId).toBe(buyerId);
        expect(created.sellerId).toBe(sellerId);
        expect(created.shippingStatus).toBe("PENDING");
        expect(created.data).toBe("LineItems or JSON data");
        orderId = created.id;
      });
  });

  it("Can fetch order by id", async () => {
    const query = `
      query get {
        order(id: "${orderId}") {
          id
          buyerId
          sellerId
          shippingStatus
          data
        }
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const fetched = res.body.data.order;
        expect(fetched).toBeDefined();
        expect(fetched.id).toBe(orderId);
      });
  });

  it("Can update shipping status", async () => {
    const mutation = `
      mutation update {
        updateOrderStatus(id: "${orderId}", status: SHIPPED)
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query: mutation })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.updateOrderStatus).toBe(true);
      });
    const checkQuery = `
      query check {
        order(id: "${orderId}") {
          id
          shippingStatus
        }
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query: checkQuery })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.order.shippingStatus).toBe("SHIPPED");
      });
  });

  it("Can fetch all orders", async () => {
    const query = `
      query getAll {
        allOrders {
          id
          buyerId
          sellerId
          shippingStatus
        }
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        const orders = res.body.data.allOrders;
        expect(Array.isArray(orders)).toBe(true);
        expect(orders.length).toBeGreaterThan(0);
        const found = orders.find((o: any) => o.id === orderId);
        expect(found).toBeDefined();
      });
  });

  it("Can delete an order", async () => {
    const mutation = `
      mutation remove {
        deleteOrder(id: "${orderId}")
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query: mutation })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeUndefined();
        expect(res.body.data.deleteOrder).toBe(true);
      });
    const checkQuery = `
      query check {
        order(id: "${orderId}") {
          id
        }
      }
    `;
    await supertest(server)
      .post("/graphql")
      .set("Authorization", `Bearer ${token}`)
      .send({ query: checkQuery })
      .expect(200)
      .then((res) => {
        expect(res.body.errors).toBeDefined();
        expect(res.body.errors.length).toBeGreaterThan(0);
      });
  });
});
</file>

<file path="tests/fixtures/data.sql">
-- tests/fixtures/data.sql
-- Global seed data for tests

-- Seed accounts with fixed IDs
INSERT INTO account (id, email, data, restricted)
VALUES
  (
    '00000000-0000-0000-0000-000000000001',
    '<sammy@slugmart.com>',
    jsonb_build_object(
      'password', crypt('sammyslug', 'hello'),
      'name', jsonb_build_object('first', 'Sammy', 'last', 'Slug'),
      'roles', jsonb_build_array('Shopper','Vendor','Admin'),
      'profile', jsonb_build_object('username', 'sammyslug', 'bio', 'I love shopping.')
    ),
    false
  ),
  (
    '00000000-0000-0000-0000-000000000002',
    '<test@example.com>',
    jsonb_build_object(
      'password', crypt('password', 'hello'),
      'name', jsonb_build_object('first', 'John', 'last', 'Doe'),
      'roles', jsonb_build_array('admin'),
      'profile', jsonb_build_object('username', 'johndoe', 'bio', 'Administrator account.')
    ),
    false
  );

-- Seed listings (using fixed IDs)
INSERT INTO listing (id, owner_id, data)
VALUES
  (
    '00000000-0000-0000-0000-000000000010',
    '00000000-0000-0000-0000-000000000001',
    jsonb_build_object(
      'brand', 'TestBrand',
      'name', 'TestName',
      'description', 'A test description',
      'imageUrls', ARRAY['http://example.com/image.jpg']
    )
  )
ON CONFLICT (id) DO NOTHING;

INSERT INTO listing (id, owner_id, data)
VALUES
  (
    '00000000-0000-0000-0000-000000000011',
    '00000000-0000-0000-0000-000000000001',
    jsonb_build_object(
      'brand', 'TestBrand2',
      'name', 'AnotherItem',
      'description', 'Another test description',
      'imageUrls', ARRAY['http://example.com/image2.jpg']
    )
  )
ON CONFLICT (id) DO NOTHING;

-- Seed a message
INSERT INTO message (id, item_owner_id, sender_id, data)
VALUES (
  '00000000-0000-0000-0000-000000000100',
  '00000000-0000-0000-0000-000000000010',
  '00000000-0000-0000-0000-000000000002',
  jsonb_build_object('content', 'Initial test message')
)
ON CONFLICT (id) DO NOTHING;

-- Seed orders
INSERT INTO orders (id, buyer_id, seller_id, shipping_status, item_id, data)
VALUES
  (
    '11111111-1111-1111-1111-111111111111',
    '00000000-0000-0000-0000-000000000002',
    '00000000-0000-0000-0000-000000000001',
    'PENDING',
    '00000000-0000-0000-0000-000000000010',
    jsonb_build_object('notes', 'Sample seeded order #1')
  )
ON CONFLICT (id) DO NOTHING;

INSERT INTO orders (id, buyer_id, seller_id, shipping_status, item_id, data)
VALUES
  (
    '22222222-2222-2222-2222-222222222222',
    '00000000-0000-0000-0000-000000000002',
    '00000000-0000-0000-0000-000000000001',
    'SHIPPED',
    '00000000-0000-0000-0000-000000000011',
    jsonb_build_object('notes', 'Sample seeded order #2')
  )
ON CONFLICT (id) DO NOTHING;
</file>

<file path="tests/fixtures/schema.sql">
-- tests/fixtures/schema.sql
-- Production schema for all tables

CREATE EXTENSION IF NOT EXISTS pgcrypto;

DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS message CASCADE;
DROP TABLE IF EXISTS listing CASCADE;
DROP TABLE IF EXISTS account CASCADE;

-- Account table
CREATE TABLE account (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  email text UNIQUE NOT NULL,
  data jsonb NOT NULL,
  restricted boolean NOT NULL DEFAULT false
);

-- Listing table
CREATE TABLE listing (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  owner_id uuid NOT NULL,
  data jsonb NOT NULL
);

-- Message table
CREATE TABLE message (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  item_owner_id uuid NOT NULL,
  sender_id uuid NOT NULL,
  data jsonb NOT NULL
);

-- Orders table
CREATE TABLE orders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  buyer_id uuid NOT NULL,
  seller_id uuid NOT NULL,
  shipping_status text NOT NULL DEFAULT 'pending',
  item_id uuid NOT NULL,
  data jsonb,
  CONSTRAINT fk_order_buyer
    FOREIGN KEY (buyer_id)
    REFERENCES account (id)
    ON DELETE CASCADE,
  CONSTRAINT fk_order_seller
    FOREIGN KEY (seller_id)
    REFERENCES account (id)
    ON DELETE CASCADE,
  CONSTRAINT fk_order_item
    FOREIGN KEY (item_id)
    REFERENCES listing (id)
);
</file>

<file path="tests/dbTest.ts">
// tests/dbTest.ts

import { Pool } from "pg";
import dotenv from "dotenv";
import *as fs from "fs";
import* as path from "path";

dotenv.config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL, // points to your test DB
});

export async function resetGlobal(): Promise<void> {
  const fixturesPath = path.join(__dirname, "fixtures");
  const schemaFile = path.join(fixturesPath, "schema.sql");
  const dataFile = path.join(fixturesPath, "data.sql");

  if (fs.existsSync(schemaFile)) {
    const schema = fs.readFileSync(schemaFile, "utf8");
    await pool.query(schema);
    console.log(`Executed global schema file: ${schemaFile}`);
  } else {
    throw new Error(`Global schema file not found at: ${schemaFile}`);
  }

  if (fs.existsSync(dataFile)) {
    const data = fs.readFileSync(dataFile, "utf8");
    await pool.query(data);
    console.log(`Executed global data file: ${dataFile}`);
  } else {
    throw new Error(`Global data file not found at: ${dataFile}`);
  }
}

export function shutdown(done: Function): void {
  pool.end(() => {
    done();
  });
}
</file>

<file path=".repomixignore">
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/
</file>

<file path="babel.config.js">
// microservices/auth/babel.config.js
module.exports = {
    presets: [
      ['@babel/preset-env', { targets: { node: 'current' } }],
      '@babel/preset-typescript'
    ],
  };
</file>

<file path="db.ts">
import { Pool } from 'pg';
import dotenv from 'dotenv';
dotenv.config();

console.log(process.env.DATABASE_URL);

export const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });
</file>

<file path="index.ts">
// src/index.ts
import dotenv from "dotenv";
import express from "express";
import helmet from "helmet";
import { createHandler } from "graphql-http/lib/use/express";
import { Pool } from "pg";
import "reflect-metadata";
import { buildSchema, AuthChecker } from "type-graphql";
import * as jwt from "jsonwebtoken";
import { Container } from "typedi";

// Import AWS SDK (v2 in this example)
import AWS from "aws-sdk";

dotenv.config();

import { AccountResolver } from "./src/account/graphql/resolver";
import { AuthResolver } from "./src/auth/graphql/resolver";
import { ListingResolver } from "./src/listing/graphql/resolver";
import { MessageResolver } from "./src/message/graphql/resolver";
import { OrderResolver } from "./src/orders/graphql/resolver";
import { S3Resolver } from "./src/s3/graphql/resolver";

// Use a single database pool instance
export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

/**

- Global auth checker for TypeGraphQL.
- Public operations like login and makeAccount bypass authentication.
 */
const customAuthChecker: AuthChecker<any> = ({ context }, roles) => {
  if (context.req.body && typeof context.req.body.query === "string") {
    if (/(\blogin\b)|(\bmakeAccount\b)/i.test(context.req.body.query)) {
      return true;
    }
  }
  const authHeader = context.req.headers.authorization;
  if (!authHeader) {
    return false;
  }
  const token = authHeader.split[" "](1);
  try {
    const decoded = jwt.verify(token, process.env.MASTER_SECRET as string) as { id: string };
    context.userId = decoded.id;
    return true;
  } catch (err) {
    return false;
  }
};

async function createSchema() {
  return await buildSchema({
    resolvers: [
      AuthResolver,
      AccountResolver,
      ListingResolver,
      MessageResolver,
      OrderResolver,
      S3Resolver,
    ],
    authChecker: customAuthChecker,
    container: Container,
  });
}

/**

- Ping the S3 bucket by calling headBucket.
 */
async function pingS3(): Promise<void> {
  const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
    region: process.env.AWS_REGION!,
  });
  try {
    // headBucket checks that the bucket exists and that the credentials are valid.
    await s3.headBucket({ Bucket: process.env.AWS_S3_BUCKET! }).promise();
    console.log("Successfully connected to S3 bucket:", process.env.AWS_S3_BUCKET);
  } catch (error) {
    console.error("Error connecting to S3 bucket:", error);
    throw error;
  }
}

export async function createApp() {
  // Test database connection
  const client = await pool.connect();
  const res = await client.query("SELECT NOW()");
  client.release();
  console.log("Connected to database, current time:", res.rows[0].now);

  // Ping S3 to ensure connectivity before starting
  await pingS3();

  // Build the GraphQL schema
  const schema = await createSchema();

  const app = express();

  app.use(helmet());
  app.use(express.json());

  // Mount the GraphQL endpoint (auth is handled via TypeGraphQL)
  app.all(
    "/graphql",
    createHandler({
      schema,
      context: (req) => ({ req }),
    })
  );

  return app;
}

if (require.main === module) {
  createApp()
    .then((app) => {
      app.listen(4000, () => {
        console.log("Running a GraphQL API server at <http://localhost:4000/graphql>");
      });
    })
    .catch((err) => {
      console.error("Failed to start server", err);
    });
}
</file>

<file path="jest.config.js">
// microservices/auth/jest.config.js
module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'node',
    rootDir: './',
    //testMatch: ['<rootDir>/src/test/*.test.ts'],
    moduleFileExtensions: ['ts', 'js'],
    transform: {
        '^.+\\.(ts|tsx)$': [
            'ts-jest',
            {
                tsconfig: 'tsconfig.json'
            }
        ],
        // This line allows Babel to transform ESM in node_modules
        '^.+\\.(js|mjs)$': 'babel-jest',
    },
    testPathIgnorePatterns: [
        "/node_modules/",
        "/dist/"
      ],
    transformIgnorePatterns: [
        // Override default to allow graphql-request to be transformed
        'node_modules/(?!graphql-request)'
    ],

};
</file>

<file path="package.json">
{
  "name": "vintain-backend",
  "version": "1.0.0",
  "description": "",
  "main": "dist/index.js",
  "scripts": {
    "dev": "ts-node src/index.ts",
    "build": "tsc",
    "start": "tsc && node dist/index.js",
    "test": "npm run test:auth && npm run test:account && npm run test:listing && npm run test:message && npm run test:orders",
    "test:auth": "jest --config jest.config.js --testPathPattern='tests/domains/auth/' --runInBand",
    "test:account": "jest --config jest.config.js --testPathPattern='tests/domains/account/' --runInBand",
    "test:listing": "jest --config jest.config.js --testPathPattern='tests/domains/listing/' --runInBand",
    "test:message": "jest --config jest.config.js --testPathPattern='tests/domains/message/' --runInBand",
    "test:orders": "jest --config jest.config.js --testPathPattern='tests/domains/orders/' --runInBand"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@aws-sdk/client-s3": "^3.741.0",
    "@aws-sdk/s3-request-presigner": "^3.741.0",
    "aws-sdk": "^2.1692.0",
    "class-validator": "^0.14.1",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "graphql": "^16.10.0",
    "graphql-http": "^1.22.3",
    "graphql-request": "^7.1.2",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "pg": "^8.13.1",
    "reflect-metadata": "^0.2.2",
    "supertest": "^7.0.0",
    "type-graphql": "^2.0.0-rc.2",
    "typedi": "^0.10.0"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.0",
    "@babel/preset-typescript": "^7.26.0",
    "@types/express": "^5.0.0",
    "@types/graphql": "^14.5.0",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^22.10.2",
    "@types/pg": "^8.11.10",
    "@types/supertest": "^6.0.2",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.2"
  }
}
</file>

<file path="repomix.config.json">
{
  "output": {
    "filePath": "repomix-output.md",
    "style": "xml",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2021",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,

    // For NestJS/TypeGraphQL/other decorators
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,

    // Keep your life simpler
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,

    // Where compiled JS goes
    "outDir": "dist",

    // The root where TS looks for source .ts files
    // '.' means "the same directory as tsconfig.json"
    "rootDir": "."
  },

  // Tell TypeScript which files/folders to include
  // Here we say "any .ts file in any subfolder"
  "include": [
    "**/*.ts"
  ],

  // Usually exclude node_modules and the dist build folder
  "exclude": [
    "node_modules",
    "dist"
  ]
}
</file>

</files>
